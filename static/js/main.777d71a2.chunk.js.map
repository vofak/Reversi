{"version":3,"sources":["game_space/NewGame.js","utils/AspectRatio.js","game_space/game/PieceEnum.js","game_space/game/Square.js","reversi/player/PlayerEnum.js","reversi/ReversiUtils.js","reversi/Board.js","reversi/player/StrongPlayer.js","game_space/game/Game.js","game_space/GameSpace.js","stats/Stats.js","App.js","serviceWorker.js","index.js"],"names":["NewGame","props","context","React","Component","AspectRatio","padding","this","ratio","className","style","paddingBottom","toString","children","PieceEnum","Object","freeze","Square","onClick","onMouseEnter","onMouseLeave","state","piece","move","toReverse","setState","white","getPiece","black","color","backgroundColor","xmlns","r","cx","cy","fill","PlayerEnum","getOpponent","player","Board","grid","rowIndex","row","columnIndex","push","empty","validMoves","currPlayer","moveNumber","winner","position","isValidMove","Error","set","getValidMoves","length","findWinner","opp","playerCount","oppCount","i","j","currPiece","get","getToReverse","validMove","ret","rowDiff","columnDiff","concat","getToReverseInDirection","rowTemp","columnTemp","isOnBoard","StrongPlayer","depth","StablePieceEnum","stable","key","val","unstable","oppStable","board","bestMove","negamax","console","log","evaluateBoard","max","res","makeMove","resLoc","undoMove","currentMobility","getCurrentMobility","potentialMobility","getPotentialMobility","stabilityBoard","getStabilityBoard","internalStability","getInternalStability","edgeStability","getEdgeStability","evaluatePosition","getMoveNumber","myMoves","opponentMoves","opponentStonesTrulyReversed","myStonesTrulyReversed","myNumber1","myNumber2","myNumber3","opponentNumber1","opponentNumber2","opponentNumber3","isFrontierStone","currTempPiece","stabilityRow","markStableCorners","markStableStonesFrom0_0Corner","markStableStonesFrom0_7Corner","markStableStonesFrom7_7Corner","markStableStonesFrom7_0Corner","markStableStonesFrom0_0CornerForChosenPlayer","stablePiece","markStableStonesFrom0_7CornerForChosenPlayer","markStableStonesFrom7_7CornerForChosenPlayer","markStableStonesFrom7_0CornerForChosenPlayer","stableStonesDifference","x","y","getCornersEvaluation","getC_SquareEvaluation","getA_SquareEvaluation","getB_SquareEvaluation","evaluatePos","stableReward","unstableReward","neutralReward","isStableStone","isUnstableStone","getEdgeStabilityApplicationCoefficient","getCurrentMobilityApplicationCoefficient","Game","square","getMove","setPiece","compMove","actualPlayer","nextMove","getSquare","updateBoard","onMouseEnterSquare","setToReverse","onMouseLeaveSquare","createRefs","getDefaultInitBoard","squares","squaresRow","createRef","current","setMove","map","ref","GameSpace","inGame","difficulty","height","width","updateWindowDimensions","bind","window","addEventListener","removeEventListener","innerWidth","innerHeight","startNewGame","Stats","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.777d71a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './NewGame.css';\r\n\r\nclass NewGame extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        return <p>newGame</p>;\r\n    }\r\n}\r\n\r\nexport default NewGame;","import React from \"react\";\r\nimport './AspectRatio.css';\r\n\r\nclass AspectRatio extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        let padding = (1 / this.props.ratio) * 100;\r\n        return (\r\n            <div className='AspectRatioContainer' style={{paddingBottom: padding.toString() + '%'}}>\r\n                <div className='AspectRatioInner'>\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AspectRatio;","const PieceEnum = Object.freeze({\"empty\": 1, \"white\": 2, \"black\": 3});\r\n\r\nexport default PieceEnum;","import React from \"react\";\r\nimport './Square.css';\r\nimport AspectRatio from '../../utils/AspectRatio'\r\nimport PieceEnum from \"./PieceEnum\";\r\n\r\nclass Square extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {piece: this.props.piece, move: this.props.move, toReverse: false};\r\n    }\r\n\r\n    setPiece(piece) {\r\n        this.setState({piece: piece});\r\n    }\r\n\r\n    setMove(move) {\r\n        this.setState({move: move});\r\n    }\r\n\r\n    setToReverse(toReverse) {\r\n        this.setState({toReverse: toReverse});\r\n    }\r\n\r\n    onClick = () => {\r\n        this.props.onClick(this);\r\n    };\r\n\r\n    onMouseEnter = () => {\r\n        this.props.onMouseEnter(this);\r\n    };\r\n\r\n    onMouseLeave = () => {\r\n        this.props.onMouseLeave(this);\r\n    };\r\n\r\n    render() {\r\n        let piece;\r\n        if (this.state.piece === PieceEnum.white) {\r\n            piece = this.getPiece('white');\r\n        } else if (this.state.piece === PieceEnum.black) {\r\n            piece = this.getPiece('black');\r\n        } else {\r\n            piece = '';\r\n        }\r\n\r\n        let color = this.state.move ? 'blue' : this.props.color;\r\n        color = this.state.toReverse ? 'aqua' : color;\r\n\r\n        return (\r\n            <div className='SquareContainer'>\r\n                <AspectRatio ratio={1}\r\n                             children={\r\n                                 <div className='Square'\r\n                                      style={{backgroundColor: color}}\r\n                                      onClick={this.onClick}\r\n                                      onMouseEnter={this.onMouseEnter}\r\n                                      onMouseLeave={this.onMouseLeave}\r\n                                 >\r\n                                     {piece}\r\n                                 </div>\r\n                             }>\r\n                </AspectRatio>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getPiece(color) {\r\n        return (\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className='Piece'>\r\n                <circle r=\"50%\" cx=\"50%\" cy=\"50%\" fill={color}/>\r\n            </svg>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square;","import PieceEnum from \"../../game_space/game/PieceEnum\";\r\n\r\nconst PlayerEnum = Object.freeze({\"white\": {piece: PieceEnum.white}, \"black\": {piece: PieceEnum.black}});\r\n\r\nexport default PlayerEnum;","import PlayerEnum from \"./player/PlayerEnum\";\r\n\r\nfunction getOpponent(player) {\r\n    return player === PlayerEnum.white ? PlayerEnum.black : PlayerEnum.white;\r\n}\r\nexport default getOpponent;","import PieceEnum from \"../game_space/game/PieceEnum\";\r\nimport React from \"react\";\r\nimport PlayerEnum from \"./player/PlayerEnum\";\r\nimport getOpponent from \"./ReversiUtils\";\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.grid = [];\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            let row = [];\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                row.push(PieceEnum.empty);\r\n            }\r\n            this.grid.push(row);\r\n        }\r\n        this.validMoves = null;\r\n        this.currPlayer = PlayerEnum.white;\r\n        this.moveNumber = 1;\r\n        this.winner = null;\r\n    }\r\n\r\n    static getDefaultInitBoard() {\r\n        let ret = new Board();\r\n        ret.grid[3][3] = PieceEnum.black;\r\n        ret.grid[4][4] = PieceEnum.black;\r\n        ret.grid[4][3] = PieceEnum.white;\r\n        ret.grid[3][4] = PieceEnum.white;\r\n        return ret;\r\n    }\r\n\r\n    get(rowIndex, columnIndex) {\r\n        return this.grid[rowIndex][columnIndex];\r\n    }\r\n\r\n    set(position, piece) {\r\n        this.grid[position.rowIndex][position.columnIndex] = piece;\r\n        this.validMoves = null;\r\n    }\r\n\r\n    getMoveNumber() {\r\n        return this.moveNumber;\r\n    }\r\n\r\n    makeMove(move) {\r\n        if (!this.isValidMove(move.rowIndex, move.columnIndex)) {\r\n            throw new Error(\"The intended move is invalid\");\r\n        }\r\n        this.set(move, this.currPlayer.piece);\r\n        for (let toReverse of move.toReverse) {\r\n            this.set(toReverse, this.currPlayer.piece);\r\n        }\r\n        this.currPlayer = getOpponent(this.currPlayer);\r\n        let validMoves = this.getValidMoves();\r\n        if (validMoves.length > 0) {\r\n            this.moveNumber++;\r\n        }\r\n        else {\r\n            this.winner = this.findWinner();\r\n        }\r\n    }\r\n\r\n    findWinner() {\r\n        let player = this.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        let playerCount = 0;\r\n        let oppCount = 0;\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                let currPiece = this.get(i, j);\r\n                if (currPiece === player.piece) {\r\n                    playerCount++;\r\n                }\r\n                else if (currPiece === opp.piece) {\r\n                    oppCount++;\r\n                }\r\n            }\r\n        }\r\n        return playerCount > oppCount ? player : opp;\r\n    }\r\n\r\n    undoMove(move) {\r\n        this.set(move, PieceEnum.empty);\r\n        for (let toReverse of move.toReverse) {\r\n            this.set(toReverse, this.currPlayer.piece);\r\n        }\r\n        this.currPlayer = getOpponent(this.currPlayer);\r\n        this.winner = null;\r\n        this.moveNumber--;\r\n    }\r\n\r\n    getValidMoves() {\r\n        if (this.validMoves === null) {\r\n            if (!this.currPlayer) {\r\n                return [];\r\n            }\r\n            let validMoves = [];\r\n            for (let rowIndex = 0; rowIndex < 8; ++rowIndex) {\r\n                for (let columnIndex = 0; columnIndex < 8; ++columnIndex) {\r\n                    if (this.grid[rowIndex][columnIndex] !== PieceEnum.empty) {\r\n                        continue;\r\n                    }\r\n                    let toReverse = this.getToReverse(this.currPlayer, rowIndex, columnIndex);\r\n                    if (toReverse.length > 0) {\r\n                        validMoves.push({rowIndex: rowIndex, columnIndex: columnIndex, toReverse: toReverse});\r\n                    }\r\n                }\r\n            }\r\n            this.validMoves = validMoves;\r\n        }\r\n\r\n        return this.validMoves;\r\n    }\r\n\r\n    isValidMove(rowIndex, columnIndex) {\r\n        let validMoves = this.getValidMoves(this.currPlayer);\r\n        for (let validMove of validMoves) {\r\n            if (validMove.rowIndex === rowIndex && validMove.columnIndex === columnIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMove(rowIndex, columnIndex) {\r\n        let validMoves = this.getValidMoves(this.currPlayer);\r\n        for (let validMove of validMoves) {\r\n            if (validMove.rowIndex === rowIndex && validMove.columnIndex === columnIndex) {\r\n                return validMove;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getToReverse(player, rowIndex, columnIndex) {\r\n        let ret = [];\r\n\r\n        for (let rowDiff = -1; rowDiff <= 1; ++rowDiff) {\r\n            for (let columnDiff = -1; columnDiff <= 1; ++columnDiff) {\r\n                if (rowDiff === 0 && columnDiff === 0) {\r\n                    continue;\r\n                }\r\n                ret = ret.concat(this.getToReverseInDirection(player, rowIndex, columnIndex, rowDiff, columnDiff))\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getToReverseInDirection(player, rowIndex, columnIndex, rowDiff, columnDiff) {\r\n        let ret = [];\r\n\r\n        let rowTemp = rowIndex;\r\n        let columnTemp = columnIndex;\r\n        while (true) {\r\n            rowTemp += rowDiff;\r\n            columnTemp += columnDiff;\r\n            if (!this.isOnBoard(rowTemp, columnTemp)) {\r\n                return [];\r\n            }\r\n            let currPiece = this.grid[rowTemp][columnTemp];\r\n            if (currPiece === PieceEnum.empty) {\r\n                return [];\r\n            } else if (currPiece === player.piece) {\r\n                return ret;\r\n            }\r\n            ret.push({rowIndex: rowTemp, columnIndex: columnTemp});\r\n        }\r\n    }\r\n\r\n    isOnBoard(rowIndex, columnIndex) {\r\n        return rowIndex >= 0 && rowIndex < 8\r\n            && columnIndex >= 0 && columnIndex < 8;\r\n    }\r\n}\r\n\r\nexport default Board;","import PieceEnum from \"../../game_space/game/PieceEnum\";\r\nimport getOpponent from \"../ReversiUtils\";\r\n\r\nclass StrongPlayer {\r\n\r\n    StablePieceEnum = Object.freeze({stable: {key: 1, val: 1}, unstable: {key: 2, val: 0}, oppStable: {key: 3, val: -1}});\r\n\r\n    constructor(depth) {\r\n        this.depth = depth ? depth : 4;\r\n    }\r\n\r\n    nextMove(board) {\r\n        let bestMove = this.negamax(board, this.depth).move;\r\n        console.log(\"playing move:\" + bestMove);\r\n        return bestMove;\r\n    }\r\n\r\n    negamax(board, depth) {\r\n        if (depth === 0 || board.winner) {\r\n            return {val: this.evaluateBoard(board)};\r\n        }\r\n\r\n        let validMoves = board.getValidMoves();\r\n\r\n        let max = -100000000;\r\n        let res = null;\r\n        for (let validMove of validMoves) {\r\n            board.makeMove(validMove);\r\n\r\n            let resLoc = this.negamax(board, depth - 1);\r\n            if (!resLoc) {\r\n                let a = 5;\r\n            }\r\n            console.log(\"Evaluated move: \" + resLoc);\r\n            if (resLoc.val > max) {\r\n                max = resLoc.val;\r\n                res = {val: resLoc.val, move: validMove};\r\n            }\r\n\r\n            board.undoMove(validMove);\r\n        }\r\n        if (res === null) {\r\n            let b = 5;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    evaluateBoard(board) {\r\n        let currentMobility = this.getCurrentMobility(board);\r\n        let potentialMobility = this.getPotentialMobility(board);\r\n\r\n        let stabilityBoard = this.getStabilityBoard(board);\r\n\r\n        let internalStability = this.getInternalStability(stabilityBoard);\r\n        let edgeStability = this.getEdgeStability(board, stabilityBoard);\r\n\r\n        return this.evaluatePosition(board.getMoveNumber(), edgeStability, internalStability, currentMobility, potentialMobility);\r\n    }\r\n\r\n    getCurrentMobility(board) {\r\n        let myMoves = 0;\r\n        let opponentMoves = 0;\r\n\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        for (let rowIndex = 0; rowIndex < 8; ++rowIndex) {\r\n            for (let columnIndex = 0; columnIndex < 8; ++columnIndex) {\r\n                if (board.get(rowIndex, columnIndex) !== PieceEnum.empty) {\r\n                    continue;\r\n                }\r\n                let opponentStonesTrulyReversed = 0;\r\n                let myStonesTrulyReversed = 0;\r\n                for (let rowDiff = -1; rowDiff <= 1; ++rowDiff) {\r\n                    for (let columnDiff = -1; columnDiff <= 1; ++columnDiff) {\r\n                        let rowTemp = rowIndex + rowDiff;\r\n                        let columnTemp = columnIndex + columnDiff;\r\n                        if (board.isOnBoard(rowTemp, columnTemp)) {\r\n\r\n                            if (board.get(rowTemp, columnTemp) === opp.piece) {\r\n\r\n                                opponentStonesTrulyReversed += board.getToReverseInDirection(player, rowTemp, columnTemp, rowDiff, columnDiff);\r\n\r\n                            } else if (board.get(rowTemp, columnTemp) === player.piece) {\r\n\r\n                                myStonesTrulyReversed += board.getToReverseInDirection(opp, rowTemp, columnTemp, rowDiff, columnDiff);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (opponentStonesTrulyReversed > 0 && myStonesTrulyReversed > 0) {\r\n                    myMoves++;\r\n                    opponentMoves++;\r\n                } else if (opponentStonesTrulyReversed > 0) {\r\n                    opponentMoves += 2;\r\n                } else if (myStonesTrulyReversed > 0) {\r\n                    myMoves += 2;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return 10 * (myMoves - opponentMoves) / (myMoves + opponentMoves + 2);\r\n    }\r\n\r\n    getPotentialMobility(board) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        let myNumber1 = 0;  //frontierStones\r\n        let myNumber2 = 0;\r\n        let myNumber3 = 0;\r\n        let opponentNumber1 = 0;  //frontierStones\r\n        let opponentNumber2 = 0;\r\n        let opponentNumber3 = 0;\r\n\r\n        for (let rowIndex = 0; rowIndex < 8; ++rowIndex) {\r\n            for (let columnIndex = 0; columnIndex < 8; ++columnIndex) {\r\n                let currPiece = board.get(rowIndex, columnIndex);\r\n                if (currPiece === opp) {\r\n                    if (this.isFrontierStone(board, rowIndex, columnIndex)) {\r\n                        myNumber1++;\r\n                    }\r\n                } else if (currPiece === player) {\r\n                    if (this.isFrontierStone(board, rowIndex, columnIndex)) {\r\n                        opponentNumber1++;\r\n                    }\r\n                } else if (currPiece === PieceEnum.empty) {\r\n                    for (let rowDiff = -1; rowDiff <= 1; ++rowDiff) {\r\n                        for (let columnDiff = -1; columnDiff <= 1; ++columnDiff) {\r\n                            let rowTemp = rowIndex + rowDiff;\r\n                            let columnTemp = columnIndex + columnDiff;\r\n\r\n                            if (board.isOnBoard(rowTemp, columnTemp)) {\r\n                                let currTempPiece = board.get(rowTemp, columnTemp);\r\n                                if (currTempPiece === opp) {\r\n                                    myNumber3++;\r\n                                } else if (currTempPiece === player) {\r\n                                    opponentNumber3++;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (myNumber3 > 0) {\r\n                        myNumber2++;\r\n                    }\r\n                    if (opponentNumber3 > 0) {\r\n                        opponentNumber2++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let potentialMobility1 = 10 * (myNumber1 - opponentNumber1) / (myNumber1 + opponentNumber1 + 2);\r\n        let potentialMobility2 = 10 * (myNumber2 - opponentNumber2) / (myNumber2 + opponentNumber2 + 2);\r\n        let potentialMobility3 = 10 * (myNumber3 - opponentNumber3) / (myNumber3 + opponentNumber3 + 2);\r\n\r\n        return potentialMobility1 + potentialMobility2 + potentialMobility3;\r\n    }\r\n\r\n    isFrontierStone(board, rowIndex, columnIndex) {\r\n        for (let rowDiff = -1; rowDiff <= 1; ++rowDiff) {\r\n            for (let columnDiff = -1; columnDiff <= 1; ++columnDiff) {\r\n                let rowTemp = rowIndex + rowDiff;\r\n                let columnTemp = columnIndex + columnDiff;\r\n\r\n                if (board.isOnBoard(rowTemp, columnTemp)) {\r\n                    if (board[rowTemp][columnTemp] === PieceEnum.empty) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getStabilityBoard(board) {\r\n        let stabilityBoard = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let stabilityRow = [];\r\n            for (let j = 0; j < 8; j++) {\r\n                stabilityRow.push(this.StablePieceEnum.unstable);\r\n            }\r\n            stabilityBoard.push(stabilityRow);\r\n        }\r\n\r\n\r\n        this.markStableCorners(board, stabilityBoard);\r\n\r\n        this.markStableStonesFrom0_0Corner(board, stabilityBoard);\r\n        this.markStableStonesFrom0_7Corner(board, stabilityBoard);\r\n        this.markStableStonesFrom7_7Corner(board, stabilityBoard);\r\n        this.markStableStonesFrom7_0Corner(board, stabilityBoard);\r\n\r\n        return stabilityBoard;\r\n    }\r\n\r\n    markStableCorners(board, stabilityBoard) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        if (board.get(0, 0) === player.piece) {\r\n            stabilityBoard[0][0] = this.StablePieceEnum.stable;\r\n        } else if (board.get(0, 0) === opp.piece) {\r\n            stabilityBoard[0][0] = this.StablePieceEnum.oppStable;\r\n        }\r\n\r\n        if (board.get(0, 7) === player.piece) {\r\n            stabilityBoard[0][7] = this.StablePieceEnum.stable;\r\n        } else if (board.get(0, 7) === opp.piece) {\r\n            stabilityBoard[0][7] = this.StablePieceEnum.oppStable;\r\n        }\r\n\r\n        if (board.get(7, 7) === player.piece) {\r\n            stabilityBoard[7][7] = this.StablePieceEnum.stable;\r\n        } else if (board.get(7, 7) === opp.piece) {\r\n            stabilityBoard[7][7] = this.StablePieceEnum.oppStable;\r\n        }\r\n\r\n        if (board.get(7, 0) === player.piece) {\r\n            stabilityBoard[7][0] = this.StablePieceEnum.stable;\r\n        } else if (board.get(7, 0) === opp.piece) {\r\n            stabilityBoard[7][0] = this.StablePieceEnum.oppStable;\r\n        }\r\n    }\r\n\r\n    markStableStonesFrom0_0Corner(board, stabilityBoard) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        if (board.get(0, 0) === player.piece) {\r\n            this.markStableStonesFrom0_0CornerForChosenPlayer(board, player, this.StablePieceEnum.stable, stabilityBoard);\r\n        } else if (board.get(0, 0) === opp.piece) {\r\n            this.markStableStonesFrom0_0CornerForChosenPlayer(board, opp, this.StablePieceEnum.oppStable, stabilityBoard);\r\n        }\r\n\r\n    }\r\n\r\n    markStableStonesFrom0_0CornerForChosenPlayer(board, player, stablePiece, stabilityBoard) {\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            if (board.get(rowIndex, 0) === player.piece) {\r\n                stabilityBoard[rowIndex][0] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n            if (board.get(0, columnIndex) === player.piece) {\r\n                stabilityBoard[0][columnIndex] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let rowIndex = 1; rowIndex < 7; ++rowIndex) {\r\n            for (let columnIndex = 1; columnIndex < 7; ++columnIndex) {\r\n                if (board.get(rowIndex, columnIndex) !== player.piece) {\r\n                    break;\r\n                }\r\n                if (stabilityBoard[rowIndex][columnIndex] !== stablePiece\r\n                    && stabilityBoard[rowIndex][columnIndex - 1] === stablePiece\r\n                    && stabilityBoard[rowIndex - 1][columnIndex - 1] === stablePiece\r\n                    && stabilityBoard[rowIndex - 1][columnIndex] === stablePiece\r\n                    && stabilityBoard[rowIndex - 1][columnIndex + 1] === stablePiece) {\r\n\r\n                    stabilityBoard[rowIndex][columnIndex] = stablePiece;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    markStableStonesFrom0_7Corner(board, stabilityBoard) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        if (board.get(0, 7) === player.piece) {\r\n            this.markStableStonesFrom0_7CornerForChosenPlayer(board, player, this.StablePieceEnum.stable, stabilityBoard);\r\n        } else if (board.get(0, 7) === opp.piece) {\r\n            this.markStableStonesFrom0_7CornerForChosenPlayer(board, opp, this.StablePieceEnum.oppStable, stabilityBoard);\r\n        }\r\n\r\n    }\r\n\r\n    markStableStonesFrom0_7CornerForChosenPlayer(board, player, stablePiece, stabilityBoard) {\r\n        for (let rowIndex = 0; rowIndex < 8; ++rowIndex) {\r\n            if (board.get(rowIndex, 7) === player.piece) {\r\n                stabilityBoard[rowIndex][7] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let columnIndex = 7; columnIndex >= 0; --columnIndex) {\r\n            if (board.get(0, columnIndex) === player.piece) {\r\n                stabilityBoard[0][columnIndex] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let rowIndex = 1; rowIndex < 7; ++rowIndex) {\r\n            for (let columnIndex = 6; columnIndex >=1; --columnIndex) {\r\n                if (board.get(rowIndex, columnIndex) !== player.piece) {\r\n                    break;\r\n                }\r\n                if (stabilityBoard[rowIndex][columnIndex] !== stablePiece\r\n                    && stabilityBoard[rowIndex][columnIndex + 1] === stablePiece\r\n                    && stabilityBoard[rowIndex - 1][columnIndex + 1] === stablePiece\r\n                    && stabilityBoard[rowIndex - 1][columnIndex] === stablePiece\r\n                    && stabilityBoard[rowIndex - 1][columnIndex - 1] === stablePiece) {\r\n\r\n                    stabilityBoard[rowIndex][columnIndex] = stablePiece;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    markStableStonesFrom7_7Corner(board, stabilityBoard) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        if (board.get(7, 7) === player.piece) {\r\n            this.markStableStonesFrom7_7CornerForChosenPlayer(board, player, this.StablePieceEnum.stable, stabilityBoard);\r\n        } else if (board.get(7, 7) === opp.piece) {\r\n            this.markStableStonesFrom7_7CornerForChosenPlayer(board, opp, this.StablePieceEnum.oppStable, stabilityBoard);\r\n        }\r\n    }\r\n\r\n    markStableStonesFrom7_7CornerForChosenPlayer(board, player, stablePiece, stabilityBoard) {\r\n        for (let rowIndex = 7; rowIndex >=0; --rowIndex) {\r\n            if (board.get(rowIndex, 7) === player.piece) {\r\n                stabilityBoard[rowIndex][7] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let columnIndex = 7; columnIndex >= 0; --columnIndex) {\r\n            if (board.get(7, columnIndex) === player.piece) {\r\n                stabilityBoard[7][columnIndex] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let rowIndex = 6; rowIndex >=1; --rowIndex) {\r\n            for (let columnIndex = 6; columnIndex >=1; --columnIndex) {\r\n                if (board.get(rowIndex, columnIndex) !== player.piece) {\r\n                    break;\r\n                }\r\n                if (stabilityBoard[rowIndex][columnIndex] !== stablePiece\r\n                    && stabilityBoard[rowIndex][columnIndex + 1] === stablePiece\r\n                    && stabilityBoard[rowIndex + 1][columnIndex + 1] === stablePiece\r\n                    && stabilityBoard[rowIndex + 1][columnIndex] === stablePiece\r\n                    && stabilityBoard[rowIndex + 1][columnIndex - 1] === stablePiece) {\r\n\r\n                    stabilityBoard[rowIndex][columnIndex] = stablePiece;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    markStableStonesFrom7_0Corner(board, stabilityBoard) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        if (board.get(7, 0) === player.piece) {\r\n            this.markStableStonesFrom7_0CornerForChosenPlayer(board, player, this.StablePieceEnum.stable, stabilityBoard);\r\n        } else if (board.get(7, 0) === opp.piece) {\r\n            this.markStableStonesFrom7_0CornerForChosenPlayer(board, opp, this.StablePieceEnum.oppStable, stabilityBoard);\r\n        }\r\n    }\r\n\r\n    markStableStonesFrom7_0CornerForChosenPlayer(board, player, stablePiece, stabilityBoard) {\r\n        for (let rowIndex = 7; rowIndex >=0; --rowIndex) {\r\n            if (board.get(rowIndex, 0) === player.piece) {\r\n                stabilityBoard[rowIndex][0] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let columnIndex = 0; columnIndex < 8; ++columnIndex) {\r\n            if (board.get(7, columnIndex) === player.piece) {\r\n                stabilityBoard[7][columnIndex] = stablePiece;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let rowIndex = 6; rowIndex >=1; --rowIndex) {\r\n            for (let columnIndex = 1; columnIndex < 7; --columnIndex) {\r\n                if (board.get(rowIndex, columnIndex) !== player.piece) {\r\n                    break;\r\n                }\r\n                if (stabilityBoard[rowIndex][columnIndex] !== stablePiece\r\n                    && stabilityBoard[rowIndex][columnIndex - 1] === stablePiece\r\n                    && stabilityBoard[rowIndex + 1][columnIndex - 1] === stablePiece\r\n                    && stabilityBoard[rowIndex + 1][columnIndex] === stablePiece\r\n                    && stabilityBoard[rowIndex + 1][columnIndex + 1] === stablePiece) {\r\n\r\n                    stabilityBoard[rowIndex][columnIndex] = stablePiece;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getInternalStability(stabilityBoard) {\r\n        let stableStonesDifference = 0;\r\n        for (let x = 0; x < 8; x++) {\r\n            for (let y = 0; y < 8; y++) {\r\n                stableStonesDifference += stabilityBoard[x][y].val;\r\n            }\r\n        }\r\n\r\n        return stableStonesDifference * 100;\r\n    }\r\n\r\n    getEdgeStability(board, stabilityBoard) {\r\n        let cornersEvaluation = this.getCornersEvaluation(stabilityBoard);\r\n        let C_SquareEvaluation = this.getC_SquareEvaluation(board, stabilityBoard);\r\n        let A_SquareEvaluation = this.getA_SquareEvaluation(board, stabilityBoard);\r\n        let B_SquareEvaluation = this.getB_SquareEvaluation(board, stabilityBoard);\r\n\r\n        return cornersEvaluation + C_SquareEvaluation + A_SquareEvaluation + B_SquareEvaluation;\r\n    }\r\n\r\n    getCornersEvaluation(stabilityBoard) {\r\n        return (stabilityBoard[0][0].val + stabilityBoard[0][7].val + stabilityBoard[7][7].val + stabilityBoard[7][0].val) * 700;\r\n    }\r\n\r\n    getA_SquareEvaluation(board, stabilityBoard) {\r\n        let stableReward = 1000;\r\n        let unstableReward = 75;\r\n        let neutralReward = 200;\r\n\r\n        let ret = 0;\r\n        ret += this.evaluatePos(board, stabilityBoard, 0, 2, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 0, 5, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 2, 0, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 5, 0, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 7, 2, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 7, 5, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 2, 7, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 5, 7, stableReward, unstableReward, neutralReward);\r\n\r\n        return ret;\r\n    }\r\n\r\n    getB_SquareEvaluation(board, stabilityBoard) {\r\n        let stableReward = 1000;\r\n        let unstableReward = 50;\r\n        let neutralReward = 200;\r\n\r\n        let ret = 0;\r\n        ret += this.evaluatePos(board, stabilityBoard, 3, 0, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 3, 7, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 0, 3, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 7, 3, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 4, 0, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 4, 7, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 0, 4, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 7, 4, stableReward, unstableReward, neutralReward);\r\n\r\n        return ret;\r\n    }\r\n\r\n    getC_SquareEvaluation(board, stabilityBoard) {\r\n        let stableReward = 1200;\r\n        let unstableReward = -25;\r\n        let neutralReward = 200;\r\n\r\n        let ret = 0;\r\n        ret += this.evaluatePos(board, stabilityBoard, 0, 6, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 0, 1, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 6, 0, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 1, 0, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 7, 6, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 7, 1, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 6, 7, stableReward, unstableReward, neutralReward);\r\n        ret += this.evaluatePos(board, stabilityBoard, 1, 7, stableReward, unstableReward, neutralReward);\r\n\r\n        return ret;\r\n    }\r\n\r\n    evaluatePos(board, stabilityBoard, rowIndex, columnIndex, stableReward, unstableReward, neutralReward) {\r\n        let player = board.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        let ret = 0;\r\n        if (board.get(rowIndex, columnIndex) === player.piece) {\r\n            if (this.isStableStone(stabilityBoard, rowIndex, columnIndex)) {\r\n                ret += stableReward;\r\n            } else if (this.isUnstableStone(board, rowIndex, columnIndex, player, opp)) {\r\n                ret += unstableReward;\r\n            } else {\r\n                ret += neutralReward;\r\n            }\r\n        } else if (board.get(rowIndex, columnIndex) === opp.piece) {\r\n            if (this.isStableStone(stabilityBoard, rowIndex, columnIndex)) {\r\n                ret -= stableReward;\r\n            } else if (this.isUnstableStone(board, rowIndex, columnIndex, player, opp)) {\r\n                ret -= unstableReward;\r\n            } else {\r\n                ret -= neutralReward;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    isStableStone(stabilityBoard, rowIndex, columnIndex) {\r\n        return stabilityBoard[rowIndex][columnIndex] === this.StablePieceEnum.stable || stabilityBoard[rowIndex][columnIndex] === this.StablePieceEnum.oppStable;\r\n    }\r\n\r\n    isUnstableStone(board, rowIndex, columnIndex, player, opp) {\r\n        if (board.get(rowIndex, columnIndex) !== player.piece) {\r\n            return false;\r\n        }\r\n        if (rowIndex === 0 || rowIndex === 7) {\r\n            let columnTemp = columnIndex;\r\n            while (board.isOnBoard(rowIndex, columnTemp + 1)) {\r\n                columnTemp += 1;\r\n                if (columnTemp === opp.piece) {\r\n                    columnTemp = columnIndex;\r\n                    while (board.isOnBoard(rowIndex, columnTemp - 1)) {\r\n                        columnTemp -= 1;\r\n                        if (columnTemp === PieceEnum.empty) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else if (columnTemp === PieceEnum.empty) {\r\n                    while (board.isOnBoard(rowIndex, columnTemp - 1)) {\r\n                        columnTemp -= 1;\r\n                        if (columnTemp === opp.piece) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (columnIndex === 7 || columnIndex === 0) {\r\n            let rowTemp = rowIndex;\r\n            while (board.isOnBoard(rowIndex, rowTemp + 1)) {\r\n                rowTemp += 1;\r\n                if (rowTemp === opp) {\r\n                    rowTemp = rowIndex;\r\n                    while (board.isOnBoard(rowIndex, rowTemp - 1)) {\r\n                        rowTemp -= 1;\r\n                        if (rowTemp === PieceEnum.empty) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else if (rowTemp === PieceEnum.empty) {\r\n                    while (board.isOnBoard(rowIndex, rowTemp - 1)) {\r\n                        rowTemp -= 1;\r\n                        if (rowTemp === opp) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    evaluatePosition(moveNumber, edgeStability, internalStability, currentMobility, potentialMobility) {\r\n        let ESAC = this.getEdgeStabilityApplicationCoefficient(moveNumber);\r\n        let ISAC = 36;\r\n        let CMAC = this.getCurrentMobilityApplicationCoefficient(moveNumber);\r\n        let PMAC = 99;\r\n\r\n        return ESAC * edgeStability + ISAC * internalStability + CMAC * currentMobility + PMAC * potentialMobility;\r\n    }\r\n\r\n    getEdgeStabilityApplicationCoefficient(moveNumber) {\r\n        return 312 + (6 * moveNumber);\r\n    }\r\n\r\n    getCurrentMobilityApplicationCoefficient(moveNumber) {\r\n        let ret;\r\n        if (moveNumber <= 25) {\r\n            ret = 50 + (2 * moveNumber);\r\n        } else {\r\n            ret = 75 + moveNumber;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default StrongPlayer;","import React from \"react\";\r\nimport './Game.css';\r\n\r\nimport Square from './Square'\r\nimport Board from '../../reversi/Board';\r\nimport getOpponent from \"../../reversi/ReversiUtils\";\r\nimport StrongPlayer from \"../../reversi/player/StrongPlayer\";\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.createRefs();\r\n        this.board = Board.getDefaultInitBoard();\r\n        this.player = props.player;\r\n        this.actualPlayer = new StrongPlayer();\r\n    }\r\n\r\n    createRefs() {\r\n        let squares = [];\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            let squaresRow = [];\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                squaresRow.push(React.createRef())\r\n            }\r\n            squares.push(squaresRow);\r\n        }\r\n        this.squares = squares;\r\n    }\r\n\r\n    makeMove = (square) => {\r\n\r\n        let validMove = this.board.getMove(square.props.rowIndex, square.props.columnIndex);\r\n        if (validMove) {\r\n            this.board.makeMove(validMove);\r\n            square.setPiece(this.player.piece);\r\n\r\n            let compMove = this.actualPlayer.nextMove(this.board);\r\n            this.board.makeMove(compMove);\r\n            this.getSquare(compMove).setPiece(getOpponent(this.player.piece));\r\n            this.updateBoard();\r\n        }\r\n    };\r\n\r\n    updateBoard() {\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                let validMove = this.board.getMove(rowIndex, columnIndex);\r\n                let square = this.squares[rowIndex][columnIndex].current;\r\n                square.setMove(validMove);\r\n                square.setPiece(this.board.get(rowIndex, columnIndex));\r\n                square.setToReverse(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseEnterSquare = (square) => {\r\n        let move = square.state.move;\r\n        if (!move) {\r\n            return;\r\n        }\r\n        for (let toReverse of move.toReverse) {\r\n            this.getSquare(toReverse).setToReverse(true);\r\n        }\r\n    };\r\n\r\n    onMouseLeaveSquare = (square) => {\r\n        let move = square.state.move;\r\n        if (!move) {\r\n            return;\r\n        }\r\n        for (let toReverse of move.toReverse) {\r\n            this.getSquare(toReverse).setToReverse(false);\r\n        }\r\n    };\r\n\r\n    getSquare(position) {\r\n        return this.squares[position.rowIndex][position.columnIndex].current;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='board'>\r\n                {this.board.grid.map((row, rowIndex) => {\r\n                    return (\r\n                        <div className='boardRow'>\r\n                            {row.map((square, columnIndex) => {\r\n                                let move = this.board.getMove(rowIndex, columnIndex);\r\n                                return <Square rowIndex={rowIndex}\r\n                                               columnIndex={columnIndex}\r\n                                               ref={this.squares[rowIndex][columnIndex]}\r\n                                               color='green'\r\n                                               piece={this.board.get(rowIndex, columnIndex)}\r\n                                               move={move}\r\n                                               onClick={this.makeMove}\r\n                                               onMouseEnter={this.onMouseEnterSquare}\r\n                                               onMouseLeave={this.onMouseLeaveSquare}/>\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport './GameSpace.css';\r\n\r\nimport NewGame from \"./NewGame\";\r\nimport Game from \"./game/Game\";\r\nimport AspectRatio from \"../utils/AspectRatio\";\r\nimport PlayerEnum from \"../reversi/player/PlayerEnum\";\r\n\r\nclass GameSpace extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {inGame: true, difficulty: 1, height: 0, width: 0};\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    startNewGame(difficulty) {\r\n        this.setState({inGame: true, difficulty: difficulty});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth * 0.7, height: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='GameSpace' style={{width: this.state.width, height: this.state.height}}>\r\n                <AspectRatio ratio={1}>\r\n                    {this.state.inGame ?\r\n                        <Game player={PlayerEnum.white}/> :\r\n                        <NewGame difficulty={1} startNewGame={this.startNewGame.bind(this)}/>}\r\n                </AspectRatio>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameSpace;","import React from \"react\";\r\nimport './Stats.css';\r\n\r\nclass Stats extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='Stats'>\r\n                <p>Stats</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stats;","import React from 'react';\r\nimport './App.css';\r\nimport GameSpace from \"./game_space/GameSpace\";\r\nimport Stats from \"./stats/Stats\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='AppRow'>\r\n            <GameSpace/>\r\n            <Stats/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}