{"version":3,"sources":["game_space/game/tick.mp3","game_space/game/bell.mp3","stats/StatsWindow.js","menu/Menu.js","game_space/DifficultyEnum.js","game_space/game/PieceEnum.js","engine/player/PlayerEnum.js","game_space/NewGame.js","game_space/game/Square.js","engine/ReversiUtils.js","engine/Board.js","engine/player/MinMaxPlayer.js","engine/player/SimplePlayer.js","engine/player/RandomPlayer.js","engine/player/HungryPlayer.js","game_space/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StatsWindow","props","context","state","victories","this","update","gamesPlayed","localStorage","getItem","piecesReversed","highestName","mostPlayed","players","JSON","parse","highestCount","name","hasOwnProperty","count","setState","Number","className","React","Component","Menu","handleNewGameClick","handleStatsClick","newGameEnabled","onClick","disabled","DifficultyEnum","Object","freeze","random","hungry","simple","strong","PieceEnum","empty","white","black","PlayerEnum","piece","NewGame","onDifficultyChange","e","difficulty","target","value","Error","selectedDifficulty","onPlayerChange","player","selectedPlayer","onSubmit","preventDefault","onStartNewGame","image","onDrop","dataTransfer","files","type","split","fr","FileReader","addEventListener","i","Image","src","result","readAsDataURL","onNameChange","id","placeholder","required","autoFocus","autoComplete","onChange","checked","htmlFor","onDragOver","Square","onMouseEnter","onMouseLeave","move","toReverse","getSvgPiece","getImgPiece","color","xmlns","r","cx","cy","fill","alt","style","height","getOpponent","Board","grid","rowIndex","row","columnIndex","push","validMoves","currPlayer","moveNumber","playerPieceCount","winner","position","isValidMove","set","getValidMoves","length","findWinner","opp","playerCount","oppCount","j","currPiece","get","getToReverse","validMove","ret","rowDiff","columnDiff","concat","getToReverseInDirection","rowTemp","columnTemp","isOnBoard","MinMaxPlayer","depth","board","negamax","a","b","val","evaluateBoard","max","res","makeMove","resLoc","undoMove","SimplePlayer","RandomPlayer","Math","floor","HungryPlayer","Game","square","getMove","bell","pause","currentTime","play","updateLocalStorage","pieceCount","alert","onGameOver","makeOpponentMove","updateBoard","tick","onMouseEnterSquare","getSquare","setToReverse","onMouseLeaveSquare","createRefs","getDefaultInitBoard","opponent","spaceHeight","spaceWidth","boardSize","Audio","tickFile","bellFile","squares","squaresRow","createRef","squareRefs","oppMove","nextMove","current","setMove","setPiece","forceUpdate","gameStats","won","setItem","toString","stringify","width","map","ref","App","handleLineChange","window","navigator","onLine","document","body","classList","remove","add","handlePopState","statsShowing","updateWindowDimensions","inGame","w","innerWidth","h","innerHeight","gameRef","updateSize","menuRef","setNewGameEnabled","history","pushState","handleStartNewGame","handleGameOver","statsRef","handleCloseModalClick","replaceState","removeEventListener","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83b674bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick.8ac3076e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell.963560d5.mp3\";","import React from \"react\";\r\n\r\nclass StatsWindow extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {victories: 0};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        let gamesPlayed = localStorage.getItem(\"gamesPlayed\");\r\n        if (!gamesPlayed) {\r\n            gamesPlayed = \"0\";\r\n        }\r\n        let victories = localStorage.getItem(\"victories\");\r\n        if (!victories) {\r\n            victories = \"0\";\r\n        }\r\n        let piecesReversed = localStorage.getItem(\"piecesReversed\");\r\n        if (!piecesReversed) {\r\n            piecesReversed = \"0\";\r\n        }\r\n\r\n        let players = JSON.parse(localStorage.getItem('players'));\r\n        let highestName;\r\n        let highestCount = 0;\r\n        for (let name in players) {\r\n            if (!players.hasOwnProperty(name)) {\r\n                continue;\r\n            }\r\n            let count = players[name];\r\n            if (count > highestCount) {\r\n                highestName = name;\r\n                highestCount = count;\r\n            }\r\n        }\r\n        let mostPlayed;\r\n        if (!highestName) {\r\n            mostPlayed = '-';\r\n        }\r\n        else {\r\n            mostPlayed = `${highestName} (${highestCount})`;\r\n        }\r\n\r\n        this.setState({\r\n            victories: Number(victories),\r\n            gamesPlayed: Number(gamesPlayed),\r\n            piecesReversed: Number(piecesReversed),\r\n            mostPlayed: mostPlayed\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Stats'>\r\n                <h2>Stats</h2>\r\n                <p>Games Played: {this.state.gamesPlayed}</p>\r\n                <p>Won: {this.state.victories}</p>\r\n                <p>Pieces Reversed: {this.state.piecesReversed}</p>\r\n                <p>Most played: {this.state.mostPlayed}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatsWindow;","import React from \"react\";\r\nimport './Menu.css';\r\n\r\nclass Menu extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {newGameEnabled: false}\r\n    }\r\n\r\n    setNewGameEnabled(newGameEnabled) {\r\n        this.setState({newGameEnabled: newGameEnabled})\r\n    }\r\n\r\n    handleNewGameClick = () => {\r\n        this.props.handleNewGameClick();\r\n    }\r\n\r\n    handleStatsClick = () => {\r\n        this.props.handleStatsClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Menu'>\r\n                <button onClick={this.handleNewGameClick} disabled={!this.state.newGameEnabled}>New game</button>\r\n                <button onClick={this.handleStatsClick}>Stats</button>\r\n                <label className='OfflineIndicator'>Offline</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","const DifficultyEnum = Object.freeze({\r\n    random: {name: \"Random Player\"},\r\n    hungry: {name: \"Hungry Player\"},\r\n    simple: {name: \"Simple Player\"},\r\n    strong: {name: \"Strong Player\"}\r\n});\r\n\r\nexport default DifficultyEnum;","const PieceEnum = Object.freeze({empty: 1, white: 2, black: 3});\r\n\r\nexport default PieceEnum;","import PieceEnum from \"../../game_space/game/PieceEnum\";\r\n\r\nconst PlayerEnum = Object.freeze({\r\n    white: {piece: PieceEnum.white, name: \"White Player\"},\r\n    black: {piece: PieceEnum.black, name: \"Black Player\"}\r\n});\r\n\r\nexport default PlayerEnum;","import React from \"react\";\r\nimport './NewGame.css';\r\nimport DifficultyEnum from \"./DifficultyEnum\";\r\nimport PlayerEnum from \"../engine/player/PlayerEnum\";\r\n\r\nclass NewGame extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {selectedDifficulty: DifficultyEnum.random, selectedPlayer: PlayerEnum.white, name:''};\r\n    }\r\n\r\n    onDifficultyChange = (e) => {\r\n        let difficulty = null;\r\n        switch (e.target.value) {\r\n            case \"random\":\r\n                difficulty = DifficultyEnum.random;\r\n                break;\r\n            case \"hungry\":\r\n                difficulty = DifficultyEnum.hungry;\r\n                break;\r\n            case \"simple\":\r\n                difficulty = DifficultyEnum.simple;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown difficulty\");\r\n        }\r\n        this.setState({selectedDifficulty: difficulty});\r\n    };\r\n\r\n    onPlayerChange = (e) => {\r\n        let player = null;\r\n        if (e.target.value === \"white\") {\r\n            player = PlayerEnum.white;\r\n        } else if (e.target.value === \"black\") {\r\n            player = PlayerEnum.black;\r\n        } else {\r\n            throw new Error(\"Unknown color\");\r\n        }\r\n        this.setState({selectedPlayer: player});\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onStartNewGame(this.state.selectedDifficulty, this.state.selectedPlayer, this.state.image, this.state.name);\r\n    };\r\n\r\n    onDrop = (e) => {\r\n        e.preventDefault();\r\n        let images = e.dataTransfer.files;\r\n        let image = images[0];\r\n        if (image.type.split(\"/\")[0] === \"image\") {\r\n            let fr = new FileReader();\r\n            fr.addEventListener(\"load\", e => {\r\n                let i = new Image();\r\n                i.src = fr.result;\r\n                this.setState({image: i})\r\n            })\r\n            fr.readAsDataURL(image);\r\n        }\r\n    };\r\n\r\n    onNameChange = (e) => {\r\n        this.setState({name: e.target.value})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='NewGame'>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className='FormSection'>\r\n                        <input type='text' id='name' placeholder='Name' required autoFocus autoComplete='off'\r\n                        onChange={this.onNameChange}/>\r\n                    </div>\r\n\r\n                    <div className='FormSection'>\r\n                        <input type=\"radio\" id=\"random\" name=\"difficulty\" value=\"random\"\r\n                               checked={this.state.selectedDifficulty === DifficultyEnum.random}\r\n                               onChange={this.onDifficultyChange}/>\r\n                        <label htmlFor=\"random\">\r\n                            Random\r\n                        </label>\r\n                        <input type=\"radio\" id=\"hungry\" name=\"difficulty\" value=\"hungry\"\r\n                               checked={this.state.selectedDifficulty === DifficultyEnum.hungry}\r\n                               onChange={this.onDifficultyChange}/>\r\n                        <label htmlFor=\"hungry\">\r\n                            Hungry\r\n                        </label>\r\n                        <input type=\"radio\" id=\"simple\" name=\"difficulty\" value=\"simple\"\r\n                               checked={this.state.selectedDifficulty === DifficultyEnum.simple}\r\n                               onChange={this.onDifficultyChange}/>\r\n                        <label htmlFor=\"simple\">\r\n                            Simple\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className='FormSection'>\r\n                        <input type=\"radio\" id=\"white\" name=\"color\" value=\"white\"\r\n                               checked={this.state.selectedPlayer === PlayerEnum.white}\r\n                               onChange={this.onPlayerChange}/>\r\n                        <label htmlFor=\"white\">\r\n                            White\r\n                        </label>\r\n                        <input type=\"radio\" id=\"black\" name=\"color\" value=\"black\"\r\n                               checked={this.state.selectedPlayer === PlayerEnum.black}\r\n                               onChange={this.onPlayerChange}/>\r\n                        <label htmlFor=\"black\">\r\n                            Black\r\n                        </label>\r\n                        <div className={'DnD'} onDrop={this.onDrop} onDragOver={e => e.preventDefault()}>{!this.state.image ? 'Drop a picture if you like' : 'Piece picture selected'}</div>\r\n                    </div>\r\n\r\n                    <footer>\r\n                        <input type='submit' value='Start Game'/>\r\n                    </footer>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGame;","import React from \"react\";\r\nimport './Square.css';\r\nimport PieceEnum from \"./PieceEnum\";\r\n\r\nclass Square extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {piece: this.props.piece, move: this.props.move, toReverse: false};\r\n    }\r\n\r\n    setPiece(piece) {\r\n        this.setState({piece: piece});\r\n    }\r\n\r\n    setMove(move) {\r\n        this.setState({move: move});\r\n    }\r\n\r\n    setToReverse(toReverse) {\r\n        this.setState({toReverse: toReverse});\r\n    }\r\n\r\n    onClick = () => {\r\n        this.props.onClick(this);\r\n    };\r\n\r\n    onMouseEnter = () => {\r\n        this.props.onMouseEnter(this);\r\n    };\r\n\r\n    onMouseLeave = () => {\r\n        this.props.onMouseLeave(this);\r\n    };\r\n\r\n    render() {\r\n        let piece;\r\n        if (this.state.piece === PieceEnum.white) {\r\n            piece = this.getSvgPiece('white');\r\n        } else if (this.state.piece === PieceEnum.black) {\r\n            piece = this.getSvgPiece('black');\r\n        } else if (this.state.piece instanceof Image) {\r\n            piece = this.getImgPiece(this.state.piece);\r\n        } else {\r\n            piece = '';\r\n        }\r\n\r\n        return (\r\n                <div className={`Square ${this.state.toReverse ? 'ToReverseSquare' : ''} ${this.state.move ? 'MoveSquare' : ''}`}\r\n                     onClick={this.onClick}\r\n                     onMouseEnter={this.onMouseEnter}\r\n                     onMouseLeave={this.onMouseLeave}\r\n                >\r\n                    {piece}\r\n                </div>\r\n        )\r\n    }\r\n\r\n    getSvgPiece(color) {\r\n        return (\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className='Piece'>\r\n                <circle r=\"50%\" cx=\"50%\" cy=\"50%\" fill={color}/>\r\n            </svg>\r\n        )\r\n    }\r\n\r\n    getImgPiece(src) {\r\n        return (\r\n            <div className={'Piece'}>\r\n                <img src={src.src} alt={'piece'} style={{height: '100%'}}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square;","import PlayerEnum from \"./player/PlayerEnum\";\r\n\r\nfunction getOpponent(player) {\r\n    return player === PlayerEnum.white ? PlayerEnum.black : PlayerEnum.white;\r\n}\r\n\r\nexport default getOpponent;","import PieceEnum from \"../game_space/game/PieceEnum\";\r\nimport React from \"react\";\r\nimport PlayerEnum from \"./player/PlayerEnum\";\r\nimport getOpponent from \"./ReversiUtils\";\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.grid = [];\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            let row = [];\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                row.push(PieceEnum.empty);\r\n            }\r\n            this.grid.push(row);\r\n        }\r\n        this.validMoves = null;\r\n        this.currPlayer = PlayerEnum.white;\r\n        this.moveNumber = 1;\r\n        this.playerPieceCount = 0;\r\n        this.winner = null;\r\n    }\r\n\r\n    static getDefaultInitBoard() {\r\n        let ret = new Board();\r\n        ret.grid[3][3] = PieceEnum.black;\r\n        ret.grid[4][4] = PieceEnum.black;\r\n        ret.grid[4][3] = PieceEnum.white;\r\n        ret.grid[3][4] = PieceEnum.white;\r\n        ret.playerPieceCount = 2;\r\n        return ret;\r\n    }\r\n\r\n    get(rowIndex, columnIndex) {\r\n        return this.grid[rowIndex][columnIndex];\r\n    }\r\n\r\n    set(position, piece) {\r\n        this.grid[position.rowIndex][position.columnIndex] = piece;\r\n        this.validMoves = null;\r\n    }\r\n\r\n    getMoveNumber() {\r\n        return this.moveNumber;\r\n    }\r\n\r\n    makeMove(move) {\r\n        if (!this.isValidMove(move.rowIndex, move.columnIndex)) {\r\n            throw new Error(\"The intended move is invalid\");\r\n        }\r\n        this.set(move, this.currPlayer.piece);\r\n        for (let toReverse of move.toReverse) {\r\n            this.set(toReverse, this.currPlayer.piece);\r\n        }\r\n        this.currPlayer = getOpponent(this.currPlayer);\r\n        let validMoves = this.getValidMoves();\r\n        if (validMoves.length > 0) {\r\n            this.moveNumber++;\r\n        } else {\r\n            this.winner = this.findWinner();\r\n        }\r\n    }\r\n\r\n    findWinner() {\r\n        let player = this.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        let playerCount = 0;\r\n        let oppCount = 0;\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                let currPiece = this.get(i, j);\r\n                if (currPiece === player.piece) {\r\n                    playerCount++;\r\n                } else if (currPiece === opp.piece) {\r\n                    oppCount++;\r\n                }\r\n            }\r\n        }\r\n        this.playerPieceCount = playerCount;\r\n        return playerCount > oppCount ? player : opp;\r\n    }\r\n\r\n    undoMove(move) {\r\n        this.set(move, PieceEnum.empty);\r\n        for (let toReverse of move.toReverse) {\r\n            this.set(toReverse, this.currPlayer.piece);\r\n        }\r\n        this.currPlayer = getOpponent(this.currPlayer);\r\n        this.winner = null;\r\n        this.moveNumber--;\r\n    }\r\n\r\n    getValidMoves() {\r\n        if (this.validMoves === null) {\r\n            if (!this.currPlayer) {\r\n                return [];\r\n            }\r\n            let validMoves = [];\r\n            for (let rowIndex = 0; rowIndex < 8; ++rowIndex) {\r\n                for (let columnIndex = 0; columnIndex < 8; ++columnIndex) {\r\n                    if (this.grid[rowIndex][columnIndex] !== PieceEnum.empty) {\r\n                        continue;\r\n                    }\r\n                    let toReverse = this.getToReverse(this.currPlayer, rowIndex, columnIndex);\r\n                    if (toReverse.length > 0) {\r\n                        validMoves.push({rowIndex: rowIndex, columnIndex: columnIndex, toReverse: toReverse});\r\n                    }\r\n                }\r\n            }\r\n            this.validMoves = validMoves;\r\n        }\r\n\r\n        return this.validMoves;\r\n    }\r\n\r\n    isValidMove(rowIndex, columnIndex) {\r\n        let validMoves = this.getValidMoves(this.currPlayer);\r\n        for (let validMove of validMoves) {\r\n            if (validMove.rowIndex === rowIndex && validMove.columnIndex === columnIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMove(rowIndex, columnIndex) {\r\n        let validMoves = this.getValidMoves(this.currPlayer);\r\n        for (let validMove of validMoves) {\r\n            if (validMove.rowIndex === rowIndex && validMove.columnIndex === columnIndex) {\r\n                return validMove;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getToReverse(player, rowIndex, columnIndex) {\r\n        let ret = [];\r\n\r\n        for (let rowDiff = -1; rowDiff <= 1; ++rowDiff) {\r\n            for (let columnDiff = -1; columnDiff <= 1; ++columnDiff) {\r\n                if (rowDiff === 0 && columnDiff === 0) {\r\n                    continue;\r\n                }\r\n                ret = ret.concat(this.getToReverseInDirection(player, rowIndex, columnIndex, rowDiff, columnDiff))\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getToReverseInDirection(player, rowIndex, columnIndex, rowDiff, columnDiff) {\r\n        let ret = [];\r\n\r\n        let rowTemp = rowIndex;\r\n        let columnTemp = columnIndex;\r\n        while (true) {\r\n            rowTemp += rowDiff;\r\n            columnTemp += columnDiff;\r\n            if (!this.isOnBoard(rowTemp, columnTemp)) {\r\n                return [];\r\n            }\r\n            let currPiece = this.grid[rowTemp][columnTemp];\r\n            if (currPiece === PieceEnum.empty) {\r\n                return [];\r\n            } else if (currPiece === player.piece) {\r\n                return ret;\r\n            }\r\n            ret.push({rowIndex: rowTemp, columnIndex: columnTemp});\r\n        }\r\n    }\r\n\r\n    isOnBoard(rowIndex, columnIndex) {\r\n        return rowIndex >= 0 && rowIndex < 8\r\n            && columnIndex >= 0 && columnIndex < 8;\r\n    }\r\n}\r\n\r\nexport default Board;","class MinMaxPlayer {\r\n\r\n    constructor(depth) {\r\n        this.depth = depth ? depth : 4;\r\n    }\r\n\r\n    nextMove(board) {\r\n        return this.negamax(board, this.depth, -100000000, 100000000).move;\r\n    }\r\n\r\n    negamax(board, depth, a, b) {\r\n        if (depth === 0 || board.winner) {\r\n            return {val: this.evaluateBoard(board)};\r\n        }\r\n\r\n        let validMoves = board.getValidMoves();\r\n\r\n        let max = -100000;\r\n        let res = null;\r\n        for (let validMove of validMoves) {\r\n            board.makeMove(validMove);\r\n\r\n            let resLoc = this.negamax(board, depth - 1, a, b);\r\n            if (resLoc.val > max) {\r\n                max = resLoc.val;\r\n                res = {val: resLoc.val, move: validMove};\r\n            }\r\n\r\n            if (res && res.val > a) {\r\n                a = res.val;\r\n            }\r\n            if (a >= b) {\r\n                break;\r\n            }\r\n\r\n            board.undoMove(validMove);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    evaluateBoard(board) {\r\n        throw new Error(\"You have to implement this function\");\r\n    }\r\n}\r\n\r\nexport default MinMaxPlayer;","import MinMaxPlayer from \"./MinMaxPlayer\";\r\n\r\nclass SimplePlayer extends MinMaxPlayer {\r\n\r\n    constructor(depth) {\r\n        super(depth);\r\n    }\r\n\r\n    evaluateBoard(board) {\r\n        let ret = 0;\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (board.get(i, j) === board.currPlayer.piece) {\r\n                    ret++;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\nexport default SimplePlayer;","class RandomPlayer {\r\n    nextMove(board) {\r\n        let validMoves = board.getValidMoves();\r\n        let randomPos = Math.floor(Math.random() * validMoves.length);\r\n        return validMoves[randomPos];\r\n    }\r\n}\r\n\r\nexport default RandomPlayer;","import MinMaxPlayer from \"./MinMaxPlayer\";\r\n\r\nclass HungryPlayer extends MinMaxPlayer {\r\n\r\n    constructor() {\r\n        super(1);\r\n    }\r\n\r\n    evaluateBoard(board) {\r\n        let ret = 0;\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (board.get(i, j) === board.currPlayer.piece) {\r\n                    ret++;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HungryPlayer;","import React from \"react\";\r\nimport './Game.css';\r\nimport tickFile from './tick.mp3';\r\nimport bellFile from './bell.mp3';\r\n\r\nimport Square from './Square'\r\nimport Board from '../../engine/Board';\r\nimport SimplePlayer from \"../../engine/player/SimplePlayer\";\r\nimport DifficultyEnum from \"../DifficultyEnum\";\r\nimport RandomPlayer from \"../../engine/player/RandomPlayer\";\r\nimport HungryPlayer from \"../../engine/player/HungryPlayer\";\r\nimport PlayerEnum from \"../../engine/player/PlayerEnum\";\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.createRefs();\r\n        this.board = Board.getDefaultInitBoard();\r\n        this.player = props.player;\r\n        this.image = props.image;\r\n        this.name = props.name;\r\n        switch (this.props.difficulty) {\r\n            case DifficultyEnum.random:\r\n                this.opponent = new RandomPlayer();\r\n                break;\r\n            case DifficultyEnum.hungry:\r\n                this.opponent = new HungryPlayer();\r\n                break;\r\n            case DifficultyEnum.simple:\r\n                this.opponent = new SimplePlayer();\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown opponent player\");\r\n        }\r\n\r\n        if (this.player !== PlayerEnum.white) {\r\n            this.makeOpponentMove();\r\n        }\r\n        if (this.props.spaceHeight > this.props.spaceWidth) {\r\n            this.state = {boardSize: this.props.spaceWidth}\r\n        }\r\n        else {\r\n            this.state = {boardSize: this.props.spaceHeight}\r\n        }\r\n        this.tick = new Audio(tickFile);\r\n        this.bell = new Audio(bellFile);\r\n    }\r\n\r\n    updateSize(spaceHeight, spaceWidth) {\r\n        if (spaceHeight > spaceWidth) {\r\n            this.setState({boardSize: spaceWidth})\r\n        }\r\n        else {\r\n            this.setState({boardSize: spaceHeight})\r\n        }\r\n    }\r\n\r\n    createRefs() {\r\n        let squares = [];\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            let squaresRow = [];\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                squaresRow.push(React.createRef())\r\n            }\r\n            squares.push(squaresRow);\r\n        }\r\n        this.squareRefs = squares;\r\n    }\r\n\r\n    makeMove = (square) => {\r\n        let validMove = this.board.getMove(square.props.rowIndex, square.props.columnIndex);\r\n        if (validMove) {\r\n            this.board.makeMove(validMove);\r\n\r\n            if (this.board.winner) {\r\n                this.bell.pause();\r\n                this.bell.currentTime = 0;\r\n                this.bell.play();\r\n                this.updateLocalStorage({winner: this.board.winner, pieceCount: this.board.playerPieceCount, name: this.name});\r\n                alert(`${this.board.winner.name} won!!!`)\r\n                this.props.onGameOver();\r\n                return;\r\n            }\r\n\r\n            this.makeOpponentMove();\r\n            this.updateBoard();\r\n            this.tick.pause();\r\n            this.tick.currentTime = 0;\r\n            this.tick.play();\r\n        }\r\n    };\r\n\r\n    makeOpponentMove() {\r\n        let oppMove = this.opponent.nextMove(this.board);\r\n        this.board.makeMove(oppMove);\r\n        if (this.board.winner) {\r\n            this.bell.pause();\r\n            this.bell.currentTime = 0;\r\n            this.bell.play();\r\n            this.updateLocalStorage({winner: this.board.winner, pieceCount: this.board.playerPieceCount, name: this.name});\r\n            alert(`${this.board.winner.name} won!!!`)\r\n            this.props.onGameOver();\r\n        }\r\n    }\r\n\r\n    updateBoard() {\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                let validMove = this.board.getMove(rowIndex, columnIndex);\r\n                let square = this.squareRefs[rowIndex][columnIndex].current;\r\n                square.setMove(validMove);\r\n                if (this.board.get(rowIndex, columnIndex) === this.player.piece && this.image) {\r\n                    square.setPiece(this.image);\r\n                } else {\r\n                    square.setPiece(this.board.get(rowIndex, columnIndex));\r\n                }\r\n                square.setToReverse(false);\r\n                square.forceUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseEnterSquare = (square) => {\r\n        let move = square.state.move;\r\n        if (!move) {\r\n            return;\r\n        }\r\n        for (let toReverse of move.toReverse) {\r\n            this.getSquare(toReverse).setToReverse(true);\r\n        }\r\n    };\r\n\r\n    onMouseLeaveSquare = (square) => {\r\n        let move = square.state.move;\r\n        if (!move) {\r\n            return;\r\n        }\r\n        for (let toReverse of move.toReverse) {\r\n            this.getSquare(toReverse).setToReverse(false);\r\n        }\r\n    };\r\n\r\n    getSquare(position) {\r\n        return this.squareRefs[position.rowIndex][position.columnIndex].current;\r\n    }\r\n\r\n    updateLocalStorage(gameStats) {\r\n        let won = gameStats.winner === this.player ? 1 : 0;\r\n        if (!localStorage.getItem(\"victories\")) {\r\n            localStorage.setItem(\"victories\", won.toString());\r\n        }\r\n        localStorage.setItem(\"victories\", (Number(localStorage.getItem(\"victories\")) + won).toString());\r\n\r\n        if (!localStorage.getItem(\"gamesPlayed\")) {\r\n            localStorage.setItem(\"gamesPlayed\", won.toString());\r\n        }\r\n        localStorage.setItem(\"gamesPlayed\", (Number(localStorage.getItem(\"gamesPlayed\")) + 1).toString());\r\n\r\n        if (!localStorage.getItem(\"piecesReversed\")) {\r\n            localStorage.setItem(\"piecesReversed\", won.toString());\r\n        }\r\n        localStorage.setItem(\"piecesReversed\", (Number(localStorage.getItem(\"piecesReversed\")) + gameStats.pieceCount).toString());\r\n\r\n        let players = JSON.parse(localStorage.getItem(\"players\"));\r\n        if (!players) {\r\n            players = {}\r\n            players[gameStats.name] = 1;\r\n        }\r\n        else {\r\n            if (!players[gameStats.name]) {\r\n                players[gameStats.name] = 0;\r\n            }\r\n            players[gameStats.name] += 1;\r\n        }\r\n        localStorage.setItem(\"players\", JSON.stringify(players));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div className='board'\r\n                     style={{width: this.state.boardSize, height: this.state.boardSize}}>\r\n                    {this.board.grid.map((row, rowIndex) => {\r\n                        {\r\n                            return row.map((square, columnIndex) => {\r\n                                let piece;\r\n                                if (this.board.get(rowIndex, columnIndex) === this.player.piece && this.image) {\r\n                                    piece = this.image;\r\n                                } else {\r\n                                    piece = this.board.get(rowIndex, columnIndex);\r\n                                }\r\n                                return <Square rowIndex={rowIndex}\r\n                                               columnIndex={columnIndex}\r\n                                               ref={this.squareRefs[rowIndex][columnIndex]}\r\n                                               piece={piece}\r\n                                               move={this.board.getMove(rowIndex, columnIndex)}\r\n                                               onClick={this.makeMove}\r\n                                               onMouseEnter={this.onMouseEnterSquare}\r\n                                               onMouseLeave={this.onMouseLeaveSquare}/>\r\n                            })\r\n                        }\r\n                    })}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport './App.css';\r\nimport StatsWindow from \"./stats/StatsWindow\";\r\nimport Menu from \"./menu/Menu\";\r\nimport NewGame from \"./game_space/NewGame\";\r\nimport Game from \"./game_space/game/Game\";\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.menuRef = React.createRef();\r\n        this.gameRef = React.createRef();\r\n        this.statsRef = React.createRef();\r\n        this.state = {inGame: false, statsShowing: false}\r\n        window.addEventListener('popstate', this.handlePopState);\r\n        window.history.replaceState({inGame: this.state.inGame, statsShowing: this.state.statsShowing}, 'app');\r\n        window.addEventListener('offline', this.handleLineChange);\r\n        window.addEventListener('online', this.handleLineChange);\r\n        if (window.navigator.onLine) {\r\n            document.body.classList.remove('OffLine')\r\n        }\r\n        else {\r\n            document.body.classList.add('OffLine')\r\n        }\r\n    }\r\n\r\n    handleLineChange = (e) => {\r\n        if (window.navigator.onLine) {\r\n            document.body.classList.remove('OffLine')\r\n        }\r\n        else {\r\n            document.body.classList.add('OffLine')\r\n        }\r\n    }\r\n\r\n    handlePopState = (e) => {\r\n        if (e.state.statsShowing) {\r\n            document.body.classList.add('ModalVisible');\r\n        } else {\r\n            document.body.classList.remove('ModalVisible');\r\n        }\r\n        this.setState(e.state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions = () => {\r\n        if (!this.state.inGame) {\r\n            return;\r\n        }\r\n        let w = window.innerWidth;\r\n        let h = window.innerHeight;\r\n        if (window.innerWidth <= 700) {\r\n            h -= 100;\r\n        } else {\r\n            w -= 100;\r\n        }\r\n        this.gameRef.current.updateSize(h, w)\r\n    };\r\n\r\n    handleNewGameClick = () => {\r\n        this.setState({inGame: false});\r\n        this.menuRef.current.setNewGameEnabled(false);\r\n        window.history.pushState({inGame: false, statsShowing: this.state.statsShowing}, 'app');\r\n    };\r\n\r\n    handleStatsClick = () => {\r\n        this.setState({statsShowing: true});\r\n        document.body.classList.add('ModalVisible');\r\n        window.history.pushState({inGame: this.state.inGame, statsShowing: true}, 'app');\r\n    };\r\n\r\n    handleStartNewGame = (difficulty, player, image, name) => {\r\n        this.menuRef.current.setNewGameEnabled(true);\r\n        this.setState({inGame: true, difficulty: difficulty, player: player, image: image, name: name});\r\n        window.history.pushState({inGame: true, statsShowing: this.state.statsShowing}, 'app');\r\n    };\r\n\r\n    handleGameOver = () => {\r\n        this.setState({inGame: false});\r\n        this.menuRef.current.setNewGameEnabled(false);\r\n        this.statsRef.current.update();\r\n        window.history.pushState({inGame: false, statsShowing: this.state.statsShowing}, 'app');\r\n    };\r\n\r\n    handleCloseModalClick = () => {\r\n        this.setState({statsShowing: false})\r\n        document.body.classList.remove('ModalVisible');\r\n        window.history.pushState({inGame: this.state.inGame, statsShowing: false}, 'app');\r\n    };\r\n\r\n    render() {\r\n        let w = window.innerWidth;\r\n        let h = window.innerHeight;\r\n        if (window.innerWidth <= 700) {\r\n            h -= 100;\r\n        } else {\r\n            w -= 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className='App'>\r\n                    <section>\r\n                        {this.state.inGame ?\r\n                            <Game ref={this.gameRef}\r\n                                  player={this.state.player}\r\n                                  onGameOver={this.handleGameOver}\r\n                                  difficulty={this.state.difficulty}\r\n                                  image={this.state.image}\r\n                                  name={this.state.name}\r\n                                  spaceWidth={w}\r\n                                  spaceHeight={h}/>\r\n                            :\r\n                            <NewGame onStartNewGame={this.handleStartNewGame}/>\r\n                        }\r\n                    </section>\r\n                    <nav>\r\n                        <Menu ref={this.menuRef}\r\n                              handleNewGameClick={this.handleNewGameClick}\r\n                              handleStatsClick={this.handleStatsClick}/>\r\n                    </nav>\r\n                </div>\r\n                <div className={'Modal'}>\r\n                    <div className={'ModalContent'}>\r\n                        <button onClick={this.handleCloseModalClick}>x</button>\r\n                        <StatsWindow ref={this.statsRef}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}