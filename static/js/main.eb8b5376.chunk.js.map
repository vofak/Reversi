{"version":3,"sources":["game_space/DifficultyEnum.js","game_space/NewGame.js","utils/AspectRatio.js","game_space/game/PieceEnum.js","game_space/game/Square.js","reversi/player/PlayerEnum.js","reversi/ReversiUtils.js","reversi/Board.js","reversi/player/SimplePlayer.js","reversi/player/MinMaxPlayer.js","game_space/game/Game.js","game_space/GameSpace.js","stats/Stats.js","App.js","serviceWorker.js","index.js"],"names":["DifficultyEnum","Object","freeze","random","name","hungry","simple","strong","NewGame","props","context","onStartNewGame","state","selectedDifficulty","onDifficultyChange","e","difficulty","target","value","Error","setState","className","type","id","checked","this","onChange","onClick","React","Component","AspectRatio","padding","ratio","style","paddingBottom","toString","children","PieceEnum","empty","white","black","Square","onMouseEnter","onMouseLeave","piece","move","toReverse","getPiece","color","backgroundColor","xmlns","r","cx","cy","fill","PlayerEnum","getOpponent","player","Board","grid","rowIndex","row","columnIndex","push","validMoves","currPlayer","moveNumber","winner","position","isValidMove","set","getValidMoves","length","findWinner","opp","playerCount","oppCount","i","j","currPiece","get","getToReverse","validMove","ret","rowDiff","columnDiff","concat","getToReverseInDirection","rowTemp","columnTemp","isOnBoard","SimplePlayer","depth","board","negamax","a","b","val","evaluateBoard","max","res","makeMove","resLoc","undoMove","Game","square","getMove","updateBoard","onGameOver","compMove","actualPlayer","nextMove","onMouseEnterSquare","getSquare","setToReverse","onMouseLeaveSquare","createRefs","getDefaultInitBoard","squares","squaresRow","createRef","current","setMove","setPiece","map","ref","GameSpace","gameStats","alert","updateLocalStorage","inGame","height","width","updateWindowDimensions","bind","window","addEventListener","removeEventListener","innerWidth","innerHeight","won","localStorage","getItem","setItem","Number","Stats","victories","update","App","onStatsChanged","stats","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYAOeA,G,YAPQC,OAAOC,OAAO,CACjCC,OAAQ,CAACC,KAAM,iBACfC,OAAQ,CAACD,KAAM,iBACfE,OAAQ,CAACF,KAAM,iBACfG,OAAQ,CAACH,KAAM,oBC2CJI,E,YAzCX,WAAYC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KAIjBC,eAAiB,WACb,EAAKF,MAAME,eAAe,EAAKC,MAAMC,qBANb,EAS5BC,mBAAqB,SAACC,GAClB,IAAIC,EAAa,KACjB,GAAuB,WAAnBD,EAAEE,OAAOC,MACTF,EAAahB,EAAeG,YACzB,GAAuB,WAAnBY,EAAEE,OAAOC,MAChBF,EAAahB,EAAeK,WACzB,IAAuB,WAAnBU,EAAEE,OAAOC,MAGhB,MAAM,IAAIC,MAAM,sBAFhBH,EAAahB,EAAeM,OAIhC,EAAKc,SAAS,CAACP,mBAAoBG,KAlBnC,EAAKJ,MAAQ,CAACC,mBAAoB,EAAKJ,MAAMO,YAFrB,E,sEAwBxB,OACI,yBAAKK,UAAU,WACX,2BAAOC,KAAK,QAAQC,GAAG,SAASnB,KAAK,aAAac,MAAM,SACjDM,QAASC,KAAKb,MAAMC,qBAAuBb,EAAeG,OAC1DuB,SAAUD,KAAKX,qBACtB,2BAAOQ,KAAK,QAAQC,GAAG,SAASnB,KAAK,aAAac,MAAM,SACjDM,QAASC,KAAKb,MAAMC,qBAAuBb,EAAeK,OAC1DqB,SAAUD,KAAKX,qBACtB,2BAAOQ,KAAK,QAAQC,GAAG,SAASnB,KAAK,aAAac,MAAM,SACjDM,QAASC,KAAKb,MAAMC,qBAAuBb,EAAeM,OAC1DoB,SAAUD,KAAKX,qBACtB,4BAAQa,QAASF,KAAKd,gBAAtB,uB,GArCMiB,IAAMC,WCkBbC,G,8BAjBX,WAAYrB,EAAOC,GAAU,qEACnBD,EAAOC,I,sEAIb,IAAIqB,EAAW,EAAIN,KAAKhB,MAAMuB,MAAS,IACvC,OACI,yBAAKX,UAAU,uBAAuBY,MAAO,CAACC,cAAeH,EAAQI,WAAa,MAC9E,yBAAKd,UAAU,oBACVI,KAAKhB,MAAM2B,e,GAXNR,IAAMC,YCDjBQ,EAFGpC,OAAOC,OAAO,CAACoC,MAAO,EAAGC,MAAO,EAAGC,MAAO,IC4E7CC,E,YArEX,WAAYhC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KAgBjBiB,QAAU,WACN,EAAKlB,MAAMkB,QAAX,iBAlBwB,EAqB5Be,aAAe,WACX,EAAKjC,MAAMiC,aAAX,iBAtBwB,EAyB5BC,aAAe,WACX,EAAKlC,MAAMkC,aAAX,iBAxBA,EAAK/B,MAAQ,CAACgC,MAAO,EAAKnC,MAAMmC,MAAOC,KAAM,EAAKpC,MAAMoC,KAAMC,WAAW,GAFjD,E,sEAKnBF,GACLnB,KAAKL,SAAS,CAACwB,MAAOA,M,8BAGlBC,GACJpB,KAAKL,SAAS,CAACyB,KAAMA,M,mCAGZC,GACTrB,KAAKL,SAAS,CAAC0B,UAAWA,M,+BAgB1B,IAAIF,EAEAA,EADAnB,KAAKb,MAAMgC,QAAUP,EAAUE,MACvBd,KAAKsB,SAAS,SACftB,KAAKb,MAAMgC,QAAUP,EAAUG,MAC9Bf,KAAKsB,SAAS,SAEd,GAGZ,IAAIC,EAAQvB,KAAKb,MAAMiC,KAAO,OAASpB,KAAKhB,MAAMuC,MAGlD,OAFAA,EAAQvB,KAAKb,MAAMkC,UAAY,OAASE,EAGpC,yBAAK3B,UAAU,mBACX,kBAAC,EAAD,CAAaW,MAAO,EACPI,SACI,yBAAKf,UAAU,SACVY,MAAO,CAACgB,gBAAiBD,GACzBrB,QAASF,KAAKE,QACde,aAAcjB,KAAKiB,aACnBC,aAAclB,KAAKkB,cAEnBC,Q,+BAQzBI,GACL,OACI,yBAAKE,MAAM,6BAA6B7B,UAAU,SAC9C,4BAAQ8B,EAAE,MAAMC,GAAG,MAAMC,GAAG,MAAMC,KAAMN,S,GAjEnCpB,IAAMC,WCDZ0B,EAFItD,OAAOC,OAAO,CAACqC,MAAO,CAACK,MAAOP,EAAUE,MAAOnC,KAAM,gBAAiBoC,MAAO,CAACI,MAAOP,EAAUG,MAAOpC,KAAM,kBCIhHoD,MAJf,SAAqBC,GACjB,OAAOA,IAAWF,EAAWhB,MAAQgB,EAAWf,MAAQe,EAAWhB,OC2KxDmB,E,WAxKX,aAAe,oBACXjC,KAAKkC,KAAO,GACZ,IAAK,IAAIC,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAE7C,IADA,IAAIC,EAAM,GACDC,EAAc,EAAGA,EAAc,EAAGA,IACvCD,EAAIE,KAAK1B,EAAUC,OAEvBb,KAAKkC,KAAKI,KAAKF,GAEnBpC,KAAKuC,WAAa,KAClBvC,KAAKwC,WAAaV,EAAWhB,MAC7Bd,KAAKyC,WAAa,EAClBzC,KAAK0C,OAAS,K,gDAYdP,EAAUE,GACV,OAAOrC,KAAKkC,KAAKC,GAAUE,K,0BAG3BM,EAAUxB,GACVnB,KAAKkC,KAAKS,EAASR,UAAUQ,EAASN,aAAelB,EACrDnB,KAAKuC,WAAa,O,sCAIlB,OAAOvC,KAAKyC,a,+BAGPrB,GACL,IAAKpB,KAAK4C,YAAYxB,EAAKe,SAAUf,EAAKiB,aACtC,MAAM,IAAI3C,MAAM,gCAEpBM,KAAK6C,IAAIzB,EAAMpB,KAAKwC,WAAWrB,OAJpB,2BAKX,YAAsBC,EAAKC,UAA3B,+CAAsC,CAAC,IAA9BA,EAA6B,QAClCrB,KAAK6C,IAAIxB,EAAWrB,KAAKwC,WAAWrB,QAN7B,kFAQXnB,KAAKwC,WAAaT,EAAY/B,KAAKwC,YAClBxC,KAAK8C,gBACPC,OAAS,EACpB/C,KAAKyC,aAELzC,KAAK0C,OAAS1C,KAAKgD,e,mCAWvB,IANA,IAAIhB,EAAShC,KAAKwC,WACdS,EAAMlB,EAAYC,GAElBkB,EAAc,EACdC,EAAW,EAENC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAYtD,KAAKuD,IAAIH,EAAGC,GACxBC,IAActB,EAAOb,MACrB+B,IACOI,IAAcL,EAAI9B,OACzBgC,IAIZ,OAAOD,EAAcC,EAAWnB,EAASiB,I,+BAGpC7B,GACLpB,KAAK6C,IAAIzB,EAAMR,EAAUC,OADd,2BAEX,YAAsBO,EAAKC,UAA3B,+CAAsC,CAAC,IAA9BA,EAA6B,QAClCrB,KAAK6C,IAAIxB,EAAWrB,KAAKwC,WAAWrB,QAH7B,kFAKXnB,KAAKwC,WAAaT,EAAY/B,KAAKwC,YACnCxC,KAAK0C,OAAS,KACd1C,KAAKyC,e,sCAIL,GAAwB,OAApBzC,KAAKuC,WAAqB,CAC1B,IAAKvC,KAAKwC,WACN,MAAO,GAGX,IADA,IAAID,EAAa,GACRJ,EAAW,EAAGA,EAAW,IAAKA,EACnC,IAAK,IAAIE,EAAc,EAAGA,EAAc,IAAKA,EACzC,GAAIrC,KAAKkC,KAAKC,GAAUE,KAAiBzB,EAAUC,MAAnD,CAGA,IAAIQ,EAAYrB,KAAKwD,aAAaxD,KAAKwC,WAAYL,EAAUE,GACzDhB,EAAU0B,OAAS,GACnBR,EAAWD,KAAK,CAACH,SAAUA,EAAUE,YAAaA,EAAahB,UAAWA,IAItFrB,KAAKuC,WAAaA,EAGtB,OAAOvC,KAAKuC,a,kCAGJJ,EAAUE,GAClB,IAAIE,EAAavC,KAAK8C,cAAc9C,KAAKwC,YADV,uBAE/B,YAAsBD,EAAtB,+CAAkC,CAAC,IAA1BkB,EAAyB,QAC9B,GAAIA,EAAUtB,WAAaA,GAAYsB,EAAUpB,cAAgBA,EAC7D,OAAO,GAJgB,kFAO/B,OAAO,I,8BAGHF,EAAUE,GACd,IAAIE,EAAavC,KAAK8C,cAAc9C,KAAKwC,YADd,uBAE3B,YAAsBD,EAAtB,+CAAkC,CAAC,IAA1BkB,EAAyB,QAC9B,GAAIA,EAAUtB,WAAaA,GAAYsB,EAAUpB,cAAgBA,EAC7D,OAAOoB,GAJY,kFAO3B,OAAO,I,mCAGEzB,EAAQG,EAAUE,GAG3B,IAFA,IAAIqB,EAAM,GAEDC,GAAW,EAAGA,GAAW,IAAKA,EACnC,IAAK,IAAIC,GAAc,EAAGA,GAAc,IAAKA,EACzB,IAAZD,GAAgC,IAAfC,IAGrBF,EAAMA,EAAIG,OAAO7D,KAAK8D,wBAAwB9B,EAAQG,EAAUE,EAAasB,EAASC,KAG9F,OAAOF,I,8CAGa1B,EAAQG,EAAUE,EAAasB,EAASC,GAK5D,IAJA,IAAIF,EAAM,GAENK,EAAU5B,EACV6B,EAAa3B,IACJ,CAGT,GAFA0B,GAAWJ,EACXK,GAAcJ,GACT5D,KAAKiE,UAAUF,EAASC,GACzB,MAAO,GAEX,IAAIV,EAAYtD,KAAKkC,KAAK6B,GAASC,GACnC,GAAIV,IAAc1C,EAAUC,MACxB,MAAO,GACJ,GAAIyC,IAActB,EAAOb,MAC5B,OAAOuC,EAEXA,EAAIpB,KAAK,CAACH,SAAU4B,EAAS1B,YAAa2B,O,gCAIxC7B,EAAUE,GAChB,OAAOF,GAAY,GAAKA,EAAW,GAC5BE,GAAe,GAAKA,EAAc,K,6CApJzC,IAAIqB,EAAM,IAAIzB,EAKd,OAJAyB,EAAIxB,KAAK,GAAG,GAAKtB,EAAUG,MAC3B2C,EAAIxB,KAAK,GAAG,GAAKtB,EAAUG,MAC3B2C,EAAIxB,KAAK,GAAG,GAAKtB,EAAUE,MAC3B4C,EAAIxB,KAAK,GAAG,GAAKtB,EAAUE,MACpB4C,M,KCNAQ,E,YAjBX,WAAYC,GAAQ,qEACVA,I,2EAGIC,GAEV,IADA,IAAIV,EAAM,EACDN,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACfe,EAAMb,IAAIH,EAAGC,KAAOe,EAAM5B,WAAWrB,OACrCuC,IAIZ,OAAOA,M,cCfX,WAAYS,GAAQ,oBAChBnE,KAAKmE,MAAQA,GAAgB,E,qDAGxBC,GACL,OAAOpE,KAAKqE,QAAQD,EAAOpE,KAAKmE,OAAQ,IAAW,KAAW/C,O,8BAG1DgD,EAAOD,EAAOG,EAAGC,GACrB,GAAc,IAAVJ,GAAeC,EAAM1B,OACrB,MAAO,CAAC8B,IAAKxE,KAAKyE,cAAcL,IAGpC,IAAI7B,EAAa6B,EAAMtB,gBAEnB4B,GAAO,IACPC,EAAM,KARc,uBASxB,YAAsBpC,EAAtB,+CAAkC,CAAC,IAA1BkB,EAAyB,QAC9BW,EAAMQ,SAASnB,GAEf,IAAIoB,EAAS7E,KAAKqE,QAAQD,EAAOD,EAAQ,EAAGG,EAAGC,GAS/C,GARIM,EAAOL,IAAME,IACbA,EAAMG,EAAOL,IACbG,EAAM,CAACH,IAAKK,EAAOL,IAAKpD,KAAMqC,IAG9BkB,GAAOA,EAAIH,IAAMF,IACjBA,EAAIK,EAAIH,KAERF,GAAKC,EACL,MAGJH,EAAMU,SAASrB,IAzBK,kFA2BxB,OAAOkB,I,oCAGGP,GACV,MAAM,IAAI1E,MAAM,2C,MCsETqF,E,YAtGX,WAAY/F,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KAmBjB2F,SAAW,SAACI,GACR,IAAIvB,EAAY,EAAKW,MAAMa,QAAQD,EAAOhG,MAAMmD,SAAU6C,EAAOhG,MAAMqD,aACvE,GAAIoB,EAAW,CAIX,GAHA,EAAKW,MAAMQ,SAASnB,GACpB,EAAKyB,cAED,EAAKd,MAAM1B,OAEX,YADA,EAAK1D,MAAMmG,WAAW,CAACzC,OAAQ,EAAK0B,MAAM1B,SAI9C,IAAI0C,EAAW,EAAKC,aAAaC,SAAS,EAAKlB,OAC/C,EAAKA,MAAMQ,SAASQ,GACpB,EAAKF,cACD,EAAKd,MAAM1B,QACX,EAAK1D,MAAMmG,WAAW,CAACzC,OAAQ,EAAK0B,MAAM1B,WAnC1B,EAoD5B6C,mBAAqB,SAACP,GAClB,IAAI5D,EAAO4D,EAAO7F,MAAMiC,KACxB,GAAKA,EAAL,CAF6B,2BAK7B,YAAsBA,EAAKC,UAA3B,+CAAsC,CAAC,IAA9BA,EAA6B,QAClC,EAAKmE,UAAUnE,GAAWoE,cAAa,IANd,qFApDL,EA8D5BC,mBAAqB,SAACV,GAClB,IAAI5D,EAAO4D,EAAO7F,MAAMiC,KACxB,GAAKA,EAAL,CAF6B,2BAK7B,YAAsBA,EAAKC,UAA3B,+CAAsC,CAAC,IAA9BA,EAA6B,QAClC,EAAKmE,UAAUnE,GAAWoE,cAAa,IANd,qFA5D7B,EAAKE,aACL,EAAKvB,MAAQnC,EAAM2D,sBACnB,EAAK5D,OAAShD,EAAMgD,OACpB,EAAKqD,aAAe,IAAInB,EAAa,GALb,E,0EAUxB,IADA,IAAI2B,EAAU,GACL1D,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAE7C,IADA,IAAI2D,EAAa,GACRzD,EAAc,EAAGA,EAAc,EAAGA,IACvCyD,EAAWxD,KAAKnC,IAAM4F,aAE1BF,EAAQvD,KAAKwD,GAEjB9F,KAAK6F,QAAUA,I,oCAwBf,IAAK,IAAI1D,EAAW,EAAGA,EAAW,EAAGA,IACjC,IAAK,IAAIE,EAAc,EAAGA,EAAc,EAAGA,IAAe,CACtD,IAAIoB,EAAYzD,KAAKoE,MAAMa,QAAQ9C,EAAUE,GACzC2C,EAAShF,KAAK6F,QAAQ1D,GAAUE,GAAa2D,QACjDhB,EAAOiB,QAAQxC,GACfuB,EAAOkB,SAASlG,KAAKoE,MAAMb,IAAIpB,EAAUE,IACzC2C,EAAOS,cAAa,M,gCAyBtB9C,GACN,OAAO3C,KAAK6F,QAAQlD,EAASR,UAAUQ,EAASN,aAAa2D,U,+BAGvD,IAAD,OACL,OACI,yBAAKpG,UAAU,SACVI,KAAKoE,MAAMlC,KAAKiE,KAAI,SAAC/D,EAAKD,GACvB,OACI,yBAAKvC,UAAU,YACVwC,EAAI+D,KAAI,SAACnB,EAAQ3C,GACd,IAAIjB,EAAO,EAAKgD,MAAMa,QAAQ9C,EAAUE,GACxC,OAAO,kBAAC,EAAD,CAAQF,SAAUA,EACVE,YAAaA,EACb+D,IAAK,EAAKP,QAAQ1D,GAAUE,GAC5Bd,MAAM,QACNJ,MAAO,EAAKiD,MAAMb,IAAIpB,EAAUE,GAChCjB,KAAMA,EACNlB,QAAS,EAAK0E,SACd3D,aAAc,EAAKsE,mBACnBrE,aAAc,EAAKwE,iC,GA9F/CvF,IAAMC,WCuDViG,E,YAnDX,WAAYrH,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KAkBjBkG,WAAa,SAACmB,GACVC,MAAMD,EAAU5D,OAAO/D,KAAO,WAC9B,EAAK6H,mBAAmBF,GACxB,EAAK3G,SAAS,CAAC8G,QAAQ,KAtBC,EAyB5BvH,eAAiB,SAACK,GACd,EAAKI,SAAS,CAAC8G,QAAQ,EAAMlH,WAAYA,KAxBzC,EAAKJ,MAAQ,CAACsH,QAAQ,EAAOzE,OAAQF,EAAWhB,MAAOvB,WAAYhB,EAAeK,OAAQ8H,OAAQ,EAAGC,MAAO,GAC5G,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAHN,E,iFAOxB7G,KAAK4G,yBACLE,OAAOC,iBAAiB,SAAU/G,KAAK4G,0B,6CAIvCE,OAAOE,oBAAoB,SAAUhH,KAAK4G,0B,+CAI1C5G,KAAKL,SAAS,CAACgH,MAA2B,GAApBG,OAAOG,WAAkBP,OAAQI,OAAOI,gB,yCAa/CZ,GACf,IAAIa,EAAMb,EAAU5D,SAAW1C,KAAKb,MAAM6C,OAAS,EAAI,EAClDoF,aAAaC,QAAQ,cACtBD,aAAaE,QAAQ,YAAaH,EAAIzG,YAE1C0G,aAAaE,QAAQ,aAAcC,OAAOH,aAAaC,QAAQ,cAAgBF,GAAKzG,c,+BAIpF,OACI,yBAAKd,UAAU,YAAYY,MAAO,CAACmG,MAAO3G,KAAKb,MAAMwH,MAAOD,OAAQ1G,KAAKb,MAAMuH,SAC3E,kBAAC,EAAD,CAAanG,MAAO,GACfP,KAAKb,MAAMsH,OACR,kBAAC,EAAD,CAAMzE,OAAQhC,KAAKb,MAAM6C,OAAQmD,WAAYnF,KAAKmF,WAC5C5F,WAAYS,KAAKb,MAAMI,aAC7B,kBAAC,EAAD,CAASL,eAAgBc,KAAKd,eAAgBK,WAAYS,KAAKb,MAAMI,mB,GA9CrEY,IAAMC,WCoBfoH,G,kBAxBX,WAAYxI,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KACRE,MAAQ,CAACsI,UAAW,GACzB,EAAKC,SAHmB,E,sEAOxB,IAAID,EAAYL,aAAaC,QAAQ,aAChCI,IACDA,EAAY,GAEhBzH,KAAKL,SAAS,CAAC8H,UAAWA,M,+BAI1B,OACI,yBAAK7H,UAAU,SACX,oCACA,mCAASI,KAAKb,MAAMsI,gB,GApBhBtH,IAAMC,YCwBXuH,E,YAnBX,WAAY3I,EAAOC,EAAS2I,GAAiB,IAAD,8BACxC,4CAAM5I,EAAOC,KAIjB2I,eAAiB,WACb,EAAKC,MAAM7B,QAAQ0B,UAJnB,EAAKG,MAAQ9B,sBAF2B,E,sEAUxC,OACI,yBAAKnG,UAAU,UACX,kBAAC,EAAD,CAAWgI,eAAgB5H,KAAK4H,iBAChC,kBAAC,EAAD,CAAOxB,IAAKpG,KAAK6H,a,GAhBf1H,IAAMC,WCOJ0H,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb8b5376.chunk.js","sourcesContent":["const DifficultyEnum = Object.freeze({\r\n    random: {name: \"Random Player\"},\r\n    hungry: {name: \"Hungry Player\"},\r\n    simple: {name: \"Simple Player\"},\r\n    strong: {name: \"Strong Player\"}\r\n});\r\n\r\nexport default DifficultyEnum;","import React from \"react\";\r\nimport './NewGame.css';\r\nimport DifficultyEnum from \"./DifficultyEnum\";\r\n\r\nclass NewGame extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {selectedDifficulty: this.props.difficulty};\r\n    }\r\n\r\n    onStartNewGame = () => {\r\n        this.props.onStartNewGame(this.state.selectedDifficulty);\r\n    };\r\n\r\n    onDifficultyChange = (e) => {\r\n        let difficulty = null;\r\n        if (e.target.value === \"random\") {\r\n            difficulty = DifficultyEnum.random;\r\n        } else if (e.target.value === \"hungry\") {\r\n            difficulty = DifficultyEnum.hungry;\r\n        } else if (e.target.value === \"simple\") {\r\n            difficulty = DifficultyEnum.simple;\r\n        } else {\r\n            throw new Error(\"Unknown difficulty\");\r\n        }\r\n        this.setState({selectedDifficulty: difficulty});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='NewGame'>\r\n                <input type=\"radio\" id=\"random\" name=\"difficulty\" value=\"random\"\r\n                       checked={this.state.selectedDifficulty === DifficultyEnum.random}\r\n                       onChange={this.onDifficultyChange}/>\r\n                <input type=\"radio\" id=\"hungry\" name=\"difficulty\" value=\"hungry\"\r\n                       checked={this.state.selectedDifficulty === DifficultyEnum.hungry}\r\n                       onChange={this.onDifficultyChange}/>\r\n                <input type=\"radio\" id=\"simple\" name=\"difficulty\" value=\"simple\"\r\n                       checked={this.state.selectedDifficulty === DifficultyEnum.simple}\r\n                       onChange={this.onDifficultyChange}/>\r\n                <button onClick={this.onStartNewGame}>start new game</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGame;","import React from \"react\";\r\nimport './AspectRatio.css';\r\n\r\nclass AspectRatio extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        let padding = (1 / this.props.ratio) * 100;\r\n        return (\r\n            <div className='AspectRatioContainer' style={{paddingBottom: padding.toString() + '%'}}>\r\n                <div className='AspectRatioInner'>\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AspectRatio;","const PieceEnum = Object.freeze({empty: 1, white: 2, black: 3});\r\n\r\nexport default PieceEnum;","import React from \"react\";\r\nimport './Square.css';\r\nimport AspectRatio from '../../utils/AspectRatio'\r\nimport PieceEnum from \"./PieceEnum\";\r\n\r\nclass Square extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {piece: this.props.piece, move: this.props.move, toReverse: false};\r\n    }\r\n\r\n    setPiece(piece) {\r\n        this.setState({piece: piece});\r\n    }\r\n\r\n    setMove(move) {\r\n        this.setState({move: move});\r\n    }\r\n\r\n    setToReverse(toReverse) {\r\n        this.setState({toReverse: toReverse});\r\n    }\r\n\r\n    onClick = () => {\r\n        this.props.onClick(this);\r\n    };\r\n\r\n    onMouseEnter = () => {\r\n        this.props.onMouseEnter(this);\r\n    };\r\n\r\n    onMouseLeave = () => {\r\n        this.props.onMouseLeave(this);\r\n    };\r\n\r\n    render() {\r\n        let piece;\r\n        if (this.state.piece === PieceEnum.white) {\r\n            piece = this.getPiece('white');\r\n        } else if (this.state.piece === PieceEnum.black) {\r\n            piece = this.getPiece('black');\r\n        } else {\r\n            piece = '';\r\n        }\r\n\r\n        let color = this.state.move ? 'blue' : this.props.color;\r\n        color = this.state.toReverse ? 'aqua' : color;\r\n\r\n        return (\r\n            <div className='SquareContainer'>\r\n                <AspectRatio ratio={1}\r\n                             children={\r\n                                 <div className='Square'\r\n                                      style={{backgroundColor: color}}\r\n                                      onClick={this.onClick}\r\n                                      onMouseEnter={this.onMouseEnter}\r\n                                      onMouseLeave={this.onMouseLeave}\r\n                                 >\r\n                                     {piece}\r\n                                 </div>\r\n                             }>\r\n                </AspectRatio>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getPiece(color) {\r\n        return (\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className='Piece'>\r\n                <circle r=\"50%\" cx=\"50%\" cy=\"50%\" fill={color}/>\r\n            </svg>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square;","import PieceEnum from \"../../game_space/game/PieceEnum\";\r\n\r\nconst PlayerEnum = Object.freeze({white: {piece: PieceEnum.white, name: \"White Player\"}, black: {piece: PieceEnum.black, name: \"Black Player\"}});\r\n\r\nexport default PlayerEnum;","import PlayerEnum from \"./player/PlayerEnum\";\r\n\r\nfunction getOpponent(player) {\r\n    return player === PlayerEnum.white ? PlayerEnum.black : PlayerEnum.white;\r\n}\r\n\r\nexport default getOpponent;","import PieceEnum from \"../game_space/game/PieceEnum\";\r\nimport React from \"react\";\r\nimport PlayerEnum from \"./player/PlayerEnum\";\r\nimport getOpponent from \"./ReversiUtils\";\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.grid = [];\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            let row = [];\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                row.push(PieceEnum.empty);\r\n            }\r\n            this.grid.push(row);\r\n        }\r\n        this.validMoves = null;\r\n        this.currPlayer = PlayerEnum.white;\r\n        this.moveNumber = 1;\r\n        this.winner = null;\r\n    }\r\n\r\n    static getDefaultInitBoard() {\r\n        let ret = new Board();\r\n        ret.grid[3][3] = PieceEnum.black;\r\n        ret.grid[4][4] = PieceEnum.black;\r\n        ret.grid[4][3] = PieceEnum.white;\r\n        ret.grid[3][4] = PieceEnum.white;\r\n        return ret;\r\n    }\r\n\r\n    get(rowIndex, columnIndex) {\r\n        return this.grid[rowIndex][columnIndex];\r\n    }\r\n\r\n    set(position, piece) {\r\n        this.grid[position.rowIndex][position.columnIndex] = piece;\r\n        this.validMoves = null;\r\n    }\r\n\r\n    getMoveNumber() {\r\n        return this.moveNumber;\r\n    }\r\n\r\n    makeMove(move) {\r\n        if (!this.isValidMove(move.rowIndex, move.columnIndex)) {\r\n            throw new Error(\"The intended move is invalid\");\r\n        }\r\n        this.set(move, this.currPlayer.piece);\r\n        for (let toReverse of move.toReverse) {\r\n            this.set(toReverse, this.currPlayer.piece);\r\n        }\r\n        this.currPlayer = getOpponent(this.currPlayer);\r\n        let validMoves = this.getValidMoves();\r\n        if (validMoves.length > 0) {\r\n            this.moveNumber++;\r\n        } else {\r\n            this.winner = this.findWinner();\r\n        }\r\n    }\r\n\r\n    findWinner() {\r\n        let player = this.currPlayer;\r\n        let opp = getOpponent(player);\r\n\r\n        let playerCount = 0;\r\n        let oppCount = 0;\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                let currPiece = this.get(i, j);\r\n                if (currPiece === player.piece) {\r\n                    playerCount++;\r\n                } else if (currPiece === opp.piece) {\r\n                    oppCount++;\r\n                }\r\n            }\r\n        }\r\n        return playerCount > oppCount ? player : opp;\r\n    }\r\n\r\n    undoMove(move) {\r\n        this.set(move, PieceEnum.empty);\r\n        for (let toReverse of move.toReverse) {\r\n            this.set(toReverse, this.currPlayer.piece);\r\n        }\r\n        this.currPlayer = getOpponent(this.currPlayer);\r\n        this.winner = null;\r\n        this.moveNumber--;\r\n    }\r\n\r\n    getValidMoves() {\r\n        if (this.validMoves === null) {\r\n            if (!this.currPlayer) {\r\n                return [];\r\n            }\r\n            let validMoves = [];\r\n            for (let rowIndex = 0; rowIndex < 8; ++rowIndex) {\r\n                for (let columnIndex = 0; columnIndex < 8; ++columnIndex) {\r\n                    if (this.grid[rowIndex][columnIndex] !== PieceEnum.empty) {\r\n                        continue;\r\n                    }\r\n                    let toReverse = this.getToReverse(this.currPlayer, rowIndex, columnIndex);\r\n                    if (toReverse.length > 0) {\r\n                        validMoves.push({rowIndex: rowIndex, columnIndex: columnIndex, toReverse: toReverse});\r\n                    }\r\n                }\r\n            }\r\n            this.validMoves = validMoves;\r\n        }\r\n\r\n        return this.validMoves;\r\n    }\r\n\r\n    isValidMove(rowIndex, columnIndex) {\r\n        let validMoves = this.getValidMoves(this.currPlayer);\r\n        for (let validMove of validMoves) {\r\n            if (validMove.rowIndex === rowIndex && validMove.columnIndex === columnIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMove(rowIndex, columnIndex) {\r\n        let validMoves = this.getValidMoves(this.currPlayer);\r\n        for (let validMove of validMoves) {\r\n            if (validMove.rowIndex === rowIndex && validMove.columnIndex === columnIndex) {\r\n                return validMove;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getToReverse(player, rowIndex, columnIndex) {\r\n        let ret = [];\r\n\r\n        for (let rowDiff = -1; rowDiff <= 1; ++rowDiff) {\r\n            for (let columnDiff = -1; columnDiff <= 1; ++columnDiff) {\r\n                if (rowDiff === 0 && columnDiff === 0) {\r\n                    continue;\r\n                }\r\n                ret = ret.concat(this.getToReverseInDirection(player, rowIndex, columnIndex, rowDiff, columnDiff))\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getToReverseInDirection(player, rowIndex, columnIndex, rowDiff, columnDiff) {\r\n        let ret = [];\r\n\r\n        let rowTemp = rowIndex;\r\n        let columnTemp = columnIndex;\r\n        while (true) {\r\n            rowTemp += rowDiff;\r\n            columnTemp += columnDiff;\r\n            if (!this.isOnBoard(rowTemp, columnTemp)) {\r\n                return [];\r\n            }\r\n            let currPiece = this.grid[rowTemp][columnTemp];\r\n            if (currPiece === PieceEnum.empty) {\r\n                return [];\r\n            } else if (currPiece === player.piece) {\r\n                return ret;\r\n            }\r\n            ret.push({rowIndex: rowTemp, columnIndex: columnTemp});\r\n        }\r\n    }\r\n\r\n    isOnBoard(rowIndex, columnIndex) {\r\n        return rowIndex >= 0 && rowIndex < 8\r\n            && columnIndex >= 0 && columnIndex < 8;\r\n    }\r\n}\r\n\r\nexport default Board;","import MinMaxPlayer from \"./MinMaxPlayer\";\r\n\r\nclass SimplePlayer extends MinMaxPlayer {\r\n\r\n    constructor(depth) {\r\n        super(depth);\r\n    }\r\n\r\n    evaluateBoard(board) {\r\n        let ret = 0;\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (board.get(i, j) === board.currPlayer.piece) {\r\n                    ret++;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\nexport default SimplePlayer;","class MinMaxPlayer {\r\n\r\n    constructor(depth) {\r\n        this.depth = depth ? depth : 4;\r\n    }\r\n\r\n    nextMove(board) {\r\n        return this.negamax(board, this.depth, -100000000, 100000000).move;\r\n    }\r\n\r\n    negamax(board, depth, a, b) {\r\n        if (depth === 0 || board.winner) {\r\n            return {val: this.evaluateBoard(board)};\r\n        }\r\n\r\n        let validMoves = board.getValidMoves();\r\n\r\n        let max = -100000;\r\n        let res = null;\r\n        for (let validMove of validMoves) {\r\n            board.makeMove(validMove);\r\n\r\n            let resLoc = this.negamax(board, depth - 1, a, b);\r\n            if (resLoc.val > max) {\r\n                max = resLoc.val;\r\n                res = {val: resLoc.val, move: validMove};\r\n            }\r\n\r\n            if (res && res.val > a) {\r\n                a = res.val;\r\n            }\r\n            if (a >= b) {\r\n                break;\r\n            }\r\n\r\n            board.undoMove(validMove);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    evaluateBoard(board) {\r\n        throw new Error(\"You have to implement this function\");\r\n    }\r\n}\r\n\r\nexport default MinMaxPlayer;","import React from \"react\";\r\nimport './Game.css';\r\n\r\nimport Square from './Square'\r\nimport Board from '../../reversi/Board';\r\nimport SimplePlayer from \"../../reversi/player/SimplePlayer\";\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.createRefs();\r\n        this.board = Board.getDefaultInitBoard();\r\n        this.player = props.player;\r\n        this.actualPlayer = new SimplePlayer(4);\r\n    }\r\n\r\n    createRefs() {\r\n        let squares = [];\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            let squaresRow = [];\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                squaresRow.push(React.createRef())\r\n            }\r\n            squares.push(squaresRow);\r\n        }\r\n        this.squares = squares;\r\n    }\r\n\r\n    makeMove = (square) => {\r\n        let validMove = this.board.getMove(square.props.rowIndex, square.props.columnIndex);\r\n        if (validMove) {\r\n            this.board.makeMove(validMove);\r\n            this.updateBoard();\r\n\r\n            if (this.board.winner) {\r\n                this.props.onGameOver({winner: this.board.winner});\r\n                return;\r\n            }\r\n\r\n            let compMove = this.actualPlayer.nextMove(this.board);\r\n            this.board.makeMove(compMove);\r\n            this.updateBoard();\r\n            if (this.board.winner) {\r\n                this.props.onGameOver({winner: this.board.winner});\r\n            }\r\n        }\r\n    };\r\n\r\n    updateBoard() {\r\n        for (let rowIndex = 0; rowIndex < 8; rowIndex++) {\r\n            for (let columnIndex = 0; columnIndex < 8; columnIndex++) {\r\n                let validMove = this.board.getMove(rowIndex, columnIndex);\r\n                let square = this.squares[rowIndex][columnIndex].current;\r\n                square.setMove(validMove);\r\n                square.setPiece(this.board.get(rowIndex, columnIndex));\r\n                square.setToReverse(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseEnterSquare = (square) => {\r\n        let move = square.state.move;\r\n        if (!move) {\r\n            return;\r\n        }\r\n        for (let toReverse of move.toReverse) {\r\n            this.getSquare(toReverse).setToReverse(true);\r\n        }\r\n    };\r\n\r\n    onMouseLeaveSquare = (square) => {\r\n        let move = square.state.move;\r\n        if (!move) {\r\n            return;\r\n        }\r\n        for (let toReverse of move.toReverse) {\r\n            this.getSquare(toReverse).setToReverse(false);\r\n        }\r\n    };\r\n\r\n    getSquare(position) {\r\n        return this.squares[position.rowIndex][position.columnIndex].current;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='board'>\r\n                {this.board.grid.map((row, rowIndex) => {\r\n                    return (\r\n                        <div className='boardRow'>\r\n                            {row.map((square, columnIndex) => {\r\n                                let move = this.board.getMove(rowIndex, columnIndex);\r\n                                return <Square rowIndex={rowIndex}\r\n                                               columnIndex={columnIndex}\r\n                                               ref={this.squares[rowIndex][columnIndex]}\r\n                                               color='green'\r\n                                               piece={this.board.get(rowIndex, columnIndex)}\r\n                                               move={move}\r\n                                               onClick={this.makeMove}\r\n                                               onMouseEnter={this.onMouseEnterSquare}\r\n                                               onMouseLeave={this.onMouseLeaveSquare}/>\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport './GameSpace.css';\r\n\r\nimport NewGame from \"./NewGame\";\r\nimport Game from \"./game/Game\";\r\nimport AspectRatio from \"../utils/AspectRatio\";\r\nimport PlayerEnum from \"../reversi/player/PlayerEnum\";\r\nimport DifficultyEnum from \"./DifficultyEnum\";\r\n\r\nclass GameSpace extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {inGame: false, player: PlayerEnum.white, difficulty: DifficultyEnum.hungry, height: 0, width: 0};\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({width: window.innerWidth * 0.7, height: window.innerHeight});\r\n    }\r\n\r\n    onGameOver = (gameStats) => {\r\n        alert(gameStats.winner.name + \" won!!!\");\r\n        this.updateLocalStorage(gameStats);\r\n        this.setState({inGame: false});\r\n    };\r\n\r\n    onStartNewGame = (difficulty) => {\r\n        this.setState({inGame: true, difficulty: difficulty});\r\n    };\r\n\r\n    updateLocalStorage(gameStats) {\r\n        let won = gameStats.winner === this.state.player ? 1 : 0;\r\n        if (!localStorage.getItem(\"victories\")){\r\n            localStorage.setItem(\"victories\", won.toString());\r\n        }\r\n        localStorage.setItem(\"victories\", (Number(localStorage.getItem(\"victories\")) + won).toString());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='GameSpace' style={{width: this.state.width, height: this.state.height}}>\r\n                <AspectRatio ratio={1}>\r\n                    {this.state.inGame ?\r\n                        <Game player={this.state.player} onGameOver={this.onGameOver}\r\n                              difficulty={this.state.difficulty}/> :\r\n                        <NewGame onStartNewGame={this.onStartNewGame} difficulty={this.state.difficulty}/>}\r\n                </AspectRatio>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameSpace;","import React from \"react\";\r\nimport './Stats.css';\r\n\r\nclass Stats extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {victories: 0};\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        let victories = localStorage.getItem(\"victories\");\r\n        if (!victories) {\r\n            victories = 0;\r\n        }\r\n        this.setState({victories: victories});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Stats'>\r\n                <p>Stats</p>\r\n                <p>Won: {this.state.victories}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stats;","import React, {createRef} from 'react';\r\nimport './App.css';\r\nimport GameSpace from \"./game_space/GameSpace\";\r\nimport Stats from \"./stats/Stats\";\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    constructor(props, context, onStatsChanged) {\r\n        super(props, context);\r\n        this.stats = createRef();\r\n    }\r\n\r\n    onStatsChanged = () => {\r\n        this.stats.current.update();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='AppRow'>\r\n                <GameSpace onStatsChanged={this.onStatsChanged}/>\r\n                <Stats ref={this.stats}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}